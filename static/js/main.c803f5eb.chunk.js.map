{"version":3,"sources":["Actions/actionTypes.ts","config.ts","Reducers/accountReducer.ts","Reducers/dialogsReducer.ts","Reducers/itemsReducer.ts","Reducers/pathReducer.ts","Reducers/uploadReducer.ts","Reducers/reducer.ts","Reducers/currentBlobReducer.ts","Reducers/errorReducer.ts","Reducers/loadingReducer.ts","serviceWorker.ts","Api/Item.ts","Api/ApiCache.ts","Api/contentTypes.ts","Api/ApiHandler.ts","Actions/Actions.ts","Components/File/File.tsx","Components/FileList/FileListEmptyMessage.tsx","Components/Loader/Loader.tsx","Components/FileList/FileList.tsx","Components/ContextMenu/ContextMenuActions/CreateFolderAction.tsx","Components/ContextMenu/ContextMenuActions/CreateFileAction.tsx","Components/ContextMenu/ContextMenuActions/UploadFileAction.tsx","Components/ContextMenu/ContextMenuActions/ChooseLocationAction.tsx","Components/Navbar/ThreeDotsMenu.tsx","Components/Breadcrumb/BreadcrumbText.tsx","Components/Navbar/Navbar.tsx","Components/ContextMenu/ContextMenuActions/OpenAction.tsx","Components/ContextMenu/ContextMenuActions/RemoveAction.tsx","Components/ContextMenu/ContextMenuActions/MoveAction.tsx","Components/ContextMenu/ContextMenuActions/CopyAction.tsx","Components/ContextMenu/ContextMenuActions/EditAction.tsx","Components/ContextMenu/ContextMenuActions/RenameAction.tsx","Components/ContextMenu/ContextMenuActions/ZipAction.tsx","Components/ContextMenu/ContextMenuActions/ExtractAction.tsx","Components/ContextMenu/ContextMenuActions/DownloadAction.tsx","Components/ContextMenu/ContextMenuActions/OpenInNewTabAction.tsx","Components/ContextMenu/ContextMenu.tsx","Components/HistoryHandler/HistoryHandler.tsx","Components/Dialogs/Menu/Menu.tsx","Components/Dialogs/Content/Content.tsx","Components/Dialogs/Media/Media.tsx","Components/Dialogs/Edit/Edit.tsx","Components/Dialogs/CreateFolder/CreateFolder.tsx","Components/Dialogs/CreateFile/CreateFile.tsx","Components/Dialogs/Rename/Rename.tsx","Components/File/FileSublist/FileSublist.tsx","Components/FileList/FileListSublist/FileListSublist.tsx","Components/Dialogs/ChooseLocation/ChooseLocation.tsx","Components/Dialogs/Move/Move.tsx","Components/Dialogs/Copy/Copy.tsx","Components/FileUploader/UploadFileList.tsx","Components/FileUploader/FileUploader.tsx","Components/Dialogs/UploadFile/UploadFile.tsx","Components/Dialogs/Dialogs.tsx","Components/Notification/DynamicSnackbar.tsx","App.tsx","index.tsx"],"names":["DIALOGS","host","config","getHost","setHost","newHost","endsWith","slice","initialState","loggedIn","webId","initialVisibleDialogs","Object","values","map","name","defineProperty","reduce","prev","cur","objectSpread","initialContextMenuState","open","x","y","initialItemsState","inCurFolder","filter","selected","removeItem","items","item","selectedItem","equals","addItem","concat","toConsumableArray","initialPath","initialUploadState","fileList","progress","rootReducer","combineReducers","account","state","arguments","length","undefined","action","type","value","blob","URL","createObjectURL","revokeObjectURL","contextMenu","visibleDialogs","errorMessage","includes","loading","path","upload","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","Item","url","size","classCallCheck","this","_name","_path","_url","_size","getPathFromUrl","pop","createClass","key","every","val","index","decodeURI","getHumanFileSize","get","FileItem","_Item","possibleConstructorReturn","getPrototypeOf","apply","inherits","patterns","image","test","media","editable","extractable","video","FolderItem","_Item2","byteString","bytes","parseInt","e","Math","pow","toFixed","urlString","pathname","split","ApiCache","_data","itemList","hasOwnProperty","_this","_len","paths","Array","_key","contains","forEach","guessContentType","_x","_x2","_guessContentType","_callee","fileName","defaultType","extType","blobType","_args","regenerator_default","a","wrap","_context","next","mime","abrupt","Blob","guessFromBlob","sent","stop","fileReader","FileReader","Promise","resolve","onloadend","target","readyState","DONE","arr","Uint8Array","result","header","i","toString","num","magicNumberToMime","readAsArrayBuffer","fileClient","SolidFileClient","solidAuth","enableLogging","cache","handleFetchError","_ref","asyncToGenerator","mark","detailedErrorMessage","displayErrorMessage","displayMessages","group","Response","text","status","401","403","404","500","Error","message","stack","JSON","stringify","groupEnd","fixPath","replace","getItemList","_ref2","_callee2","folderData","_context2","buildFolderUrl","readFolder","links","LINKS","EXCLUDE","files","folders","add","t0","getFileBlob","_ref3","_callee3","filename","res","_context3","buildFileUrl","_x3","_x4","createFolder","folderName","remove","trim","merge","MERGE","KEEP_TARGET","reject","_callee8","itemName","_context8","delete","err","deleteFolderRecursively","removeItems","filenames","all","_x5","_x6","_removeItem","copyItems","_ref4","_callee4","destination","promises","_context4","_ref5","copyFolder","withAcl","withMeta","createPath","KEEP_SOURCE","copyFile","REPLACE","flat","_x7","_x8","_x9","uploadFiles","_ref6","_callee5","_context5","from","file","updateFile","_x10","_x11","content","contentType","putFile","getAsZip","zip","JSZip","addItemsToZip","_ref7","_callee6","zipFolder","folderPath","folderItems","_context6","folder","binary","_x12","extractZipArchive","_ref8","_callee7","_args7","_context7","loadAsync","uploadExtractedZipArchive","_x13","_callee10","curFolder","_args10","_context10","getItemsInZipFolder","_ref9","_callee9","relativePath","_context9","getItemNameFromPath","getParentPathFromPath","dir","async","_x16","keys","substr","lastIndexOf","solidLogin","dispatch","getState","displayLoading","solidPopupLogin","session","updateLoginStatus","r","setErrorMessage","String","finally","stopLoading","setWebId","setLoggedIn","setLoggedOut","resetWebId","popupUri","clearCache","clear","displayCurrentItemList","resetSelectedItems","APIHandler","join","setItems","refreshItemList","renameFile","newFileName","rename","isArray","closeDialog","RENAME","renameFolder","newFolderName","promptDownload","msSaveOrOpenBlob","document","createElement","href","download","body","appendChild","click","setTimeout","removeChild","getFileContent","resetFileContent","setFileContent","loadAndEditFile","openDialog","EDIT","loadAndDisplayFile","CONTENT","displaySelectedMediaFile","MEDIA","moveItems","targetPath","itemNames","f","MOVE","setSelectedItemsFromLastTo","lastFile","_getState16$items","selectedItems","lastPreviouslySelected","lastPreviouslySelectedIndex","indexOf","lastSelectedIndex","isInRange","start","end","toAdd","selectItems","resetFileUploader","setFileUploadProgress","UPLOAD_FILE","resetFileUploadList","enterFolder","setPath","resetFilter","enterFolderByItem","makeActionCreator","moveFolderUpwards","resetPath","resetItems","selectItem","toggleSelectedItem","filterItems","setFileUploadList","openContextMenu","closeContextMenu","File","_this$props","props","isSelected","handleClick","handleDoubleClick","handleContextMenu","avatarStyle","backgroundColor","blue","realSize","getDisplaySize","react_default","className","onClick","onDoubleClick","onContextMenu","data-selected","ListItem_default","ListItemAvatar_default","Avatar_default","style","InsertDriveFile_default","Folder_default","ListItemText_default","primary","getDisplayName","secondary","Component","connect","ownProps","isEditable","isImage","isMedia","event","preventDefault","stopPropagation","nativeEvent","MouseEvent","clientX","clientY","TouchEvent","touches","pageX","pageY","warn","shiftKey","ctrlKey","FileListEmptyMessage","withStyles","theme","createStyles","margin","spacing","unit","Grid_default","container","justify","CircularProgress_default","classes","color","FileList","isLoading","itemComponents","Components_File_File","Loader_Loader","FileListEmptyMessage_FileListEmptyMessage","filterMatch","first","second","toLocaleLowerCase","CREATE_FOLDER","callback","handleClose","MenuItem_default","ListItemIcon_default","CreateNewFolder_default","Typography_default","variant","CREATE_FILE","CloudUpload_default","CHOOSE_LOCATION","FolderSharedOutlined_default","ThreeDotsMenu","anchorEl","setState","currentTarget","marginLeft","IconButton_default","aria-label","aria-owns","aria-haspopup","MoreVert_default","Menu_default","onClose","ContextMenuActions_CreateFolderAction","ContextMenuActions_CreateFileAction","ContextMenuActions_UploadFileAction","ContextMenuActions_ChooseLocationAction","React","BreadcrumbText","handleClickPath","rootTitle","handleGoBack","canGoBack","separator","rootPath","data-index","lastPath","directories","Button_default","display","KeyboardArrowLeft_default","breakpoints","up","root","width","marginBottom","grow","flexGrow","menuButton","marginRight","title","search","position","borderRadius","shape","fade","palette","common","white","&:hover","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","handleChange","moveUpwards","n","moveFolderUpwardsAndRefresh","handleRefresh","AppBar_default","Toolbar_default","noWrap","Components_Breadcrumb_BreadcrumbText","Search_default","InputBase_default","placeholder","onChange","input","Refresh_default","Navbar_ThreeDotsMenu","OpenInBrowser_default","Delete_default","HowToVote_default","COPY","FileCopy_default","WrapText_default","archiveName","generateAsync","Archive_default","Unarchive_default","_getState8","downloadName","CloudDownload_default","Link_default","ContextMenu","acts","anchorReference","anchorPosition","top","left","transformOrigin","vertical","horizontal","PaperProps","ContextMenuActions_OpenAction","ContextMenuActions_OpenInNewTabAction","ContextMenuActions_DownloadAction","ContextMenuActions_ZipAction","ContextMenuActions_ExtractAction","EditAction","ContextMenuActions_CopyAction","ContextMenuActions_MoveAction","RenameAction","ContextMenuActions_RemoveAction","getActionsForMultipleItems","getActionsForItem","getActionsForFile","getActionsForFolder","actions","push","isExtractable","HistoryHandler","call","history","states","stateIndex","createBrowserHistory","listen","handlePop","handleReplace","handlePush","updateBrowserHistory","prevState","locationsEqual","_this$props2","encodeURI","newState","Fragment","getLocationObjectFromUrl","origin","_location$state","URLSearchParams","_getLocationObjectFro","FormDialog","isLoggedIn","encodedUrl","targetForm","form","querySelector","handleSubmit","handleLogin","handleLogout","Dialog_default","aria-labelledby","fullWidth","maxWidth","DialogTitle_default","id","DialogContent_default","gutterBottom","TextField_default","autoFocus","label","bind","DialogActions_default","lastBlobUrl","blobUrl","src","alt","isVideo","react_plyr_lib_default","iconUrl","textField","createRef","_this2","fetch","t1","t2","headers","t3","current","textArea","minHeight","defaultValue","ref","DialogContentText_default","handleSave","_getState3","updateTextFile","inputRef","createNewFolder","_getState2","find","createFile","newName","previousName","FileSublist","FileListSublist","handleOpenFolder","FileSublist_FileSublist","initialHost","prevProps","updateItems","ApiHandler","actionName","_this$state","FileList_FileListSublist_FileListSublist","disabled","move","targetLocation","ChooseLocation","copy","UploadFileList","list","dense","List_default","component","FileUploader","inputElement","handleReset","handleSelectedFiles","styles","inputfile","inputreset","htmlFor","multiple","FileUploader_UploadFileList","canUpload","Components_FileUploader_FileUploader","LinearProgress_default","_getState","Dialogs","Menu_Menu","Content","Media","Edit","CreateFolder","CreateFile","Move","Copy","Rename","UploadFile","DynamicSnackbar","errorMsg","notificationDuration","Snackbar_default","anchorOrigin","autoHideDuration","ContentProps","aria-describedby","close","Close_default","padding","createMuiTheme","typography","useNextVariants","App","init","core_styles","handleHideContextMenu","Navbar","Components_FileList_FileList","Components_ContextMenu_ContextMenu","Notification_DynamicSnackbar","Dialogs_Dialogs","Components_HistoryHandler_HistoryHandler","version","element","tagName","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","react_redux_es","src_App","getElementById","process","addEventListener","response","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c803f5eb.chunk.js","sourcesContent":["import { Item } from \"../Api/Item\";\n\nexport interface Action<V> {\n    type: string;\n    value: V;\n};\n\nexport const SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\nexport const ENTER_FOLDER = 'ENTER_FOLDER';\nexport const MOVE_FOLDER_UPWARDS = 'MOVE_FOLDER_UPWARDS';\nexport const SET_PATH = 'SET_PATH';\n\nexport const SET_LOGGED_IN = 'SET_LOGGED_IN';\nexport const SET_LOGGED_OUT = 'SET_LOGGED_OUT';\nexport const RESET_HOST = 'RESET_HOST';\nexport const SET_HOST = 'SET_HOST'; // TODO: Consider renaming to BASE_URL\nexport const RESET_WEB_ID = 'RESET_WEB_ID';\nexport const SET_WEB_ID = 'SET_WEB_ID';\n\nexport const SET_ITEMS = 'SET_ITEMS';\n\nexport const SELECT_ITEMS = 'SELECT_ITEMS';\nexport const TOGGLE_SELECTED_ITEM = 'TOGGLE_SELECTED_ITEM';\nexport const DESELECT_ITEM = 'DESELECT_ITEM';\n\nexport const FILTER_ITEMS = 'FILTER_ITEMS';\nexport const RESET_FILTER = 'REMOVE_FILTER';\n\nexport const DISPLAY_LOADING = 'DISPLAY_LOADING';\nexport const STOP_LOADING = 'STOP_LOADING';\n\nexport const RESET_LOADED_BLOB = 'RESET_LOADED_BLOB';\nexport const SET_LOADED_BLOB = 'SET_LOADED_BLOB';\n\nexport const SET_UPLOAD_FILE_PROGRESS = 'SET_UPLOAD_FILE_PROGRESS';\nexport const SET_UPLOAD_FILE_LIST = 'SET_UPLOAD_FILE_LIST';\n\nexport const OPEN_CONTEXT_MENU = 'OPEN_CONTEXT_MENU';\nexport const CLOSE_CONTEXT_MENU = 'CLOSE_CONTEXT_MENU';\n\nexport const OPEN_DIALOG = 'OPEN_DIALOG';\nexport const CLOSE_DIALOG = 'CLOSE_DIALOG';\n\nexport enum DIALOGS {\n    CHOOSE_LOCATION = 'CHOOSE_LOCATION',\n    CREATE_FOLDER = 'CREATE_FOLDER',\n    CREATE_FILE = 'CREATE_FILE',\n    UPLOAD_FILE = 'UPLOAD_FILE',\n    RENAME = 'RENAME',\n    MOVE = 'MOVE',\n    COPY = 'COPY',\n    CONTENT = 'CONTENT',\n    MEDIA = 'MEDIA',\n    EDIT = 'EDIT',\n    CONTEXT_MENU = 'CONTEXT_MENU',\n};","let host: string | null = null;\n\nexport default {\n    getHost() {\n        return host;\n    },\n    setHost(newHost: string) {\n        host = newHost;\n        while (host.endsWith('/'))\n            host = host.slice(0, -1);\n    }\n};\n","import { Action, SET_LOGGED_IN, SET_LOGGED_OUT, SET_HOST, SET_WEB_ID, RESET_HOST, RESET_WEB_ID } from \"../Actions/actionTypes\";\nimport config from \"../config\";\n\ninterface AccountState {\n    loggedIn: boolean;\n    host: string | null;\n    webId: string | null;\n}\n\nconst initialState: AccountState = {\n    loggedIn: false,\n    host: null,\n    webId: null\n};\n\nexport const account = (state = initialState, action: Action<string|null|void>): AccountState => {\n    switch(action.type) {\n        case SET_LOGGED_IN:\n            return { ...state, loggedIn: true };\n        case SET_LOGGED_OUT:\n            return { ...state, loggedIn: false };\n        case SET_HOST:\n            config.setHost(action.value as string); // TODO\n            return { ...state, host: action.value as string };\n        case RESET_HOST:\n            return { ...state, host: null };\n        case SET_WEB_ID:\n            return { ...state, webId: action.value as string|null };\n        case RESET_WEB_ID:\n            return { ...state, webId: null };\n        default:\n            return state;\n    }\n};\n","import { DIALOGS, Action, OPEN_DIALOG, CLOSE_DIALOG, OPEN_CONTEXT_MENU, CLOSE_CONTEXT_MENU } from \"../Actions/actionTypes\";\n\n// Initialize state with values of DIALOGS as keys and false (closed) as value\nconst initialVisibleDialogs: Record<DIALOGS, boolean> = Object.values(DIALOGS)\n    .map((name: DIALOGS) => ({ [name]: false } as Record<DIALOGS, boolean>))\n    .reduce((prev, cur) => ({ ...prev, ...cur })) as Record<DIALOGS, boolean>;\n\nexport const visibleDialogs = (state = initialVisibleDialogs, action: Action<DIALOGS>): typeof initialVisibleDialogs => {\n    switch (action.type) {\n        case OPEN_DIALOG:\n            return { ...state, [action.value]: true };\n        case CLOSE_DIALOG:\n            return { ...state, [action.value]: false };\n        default:\n            return state;\n    }\n};\n\nconst initialContextMenuState = {\n    open: false,\n    x: 0,\n    y: 0,\n};\n\nexport const contextMenu = (state = initialContextMenuState, action: Action<any>): typeof initialContextMenuState => {\n    switch (action.type) {\n        case OPEN_CONTEXT_MENU:\n            return {\n                ...state,\n                open: true,\n                x: action.value.x,\n                y: action.value.y\n            };\n        case CLOSE_CONTEXT_MENU:\n            return { ...state, open: false };\n        default:\n            return state;\n    }\n};","import { Item } from \"../Api/Item\";\nimport { Action, SET_ITEMS, SELECT_ITEMS, DESELECT_ITEM, FILTER_ITEMS, RESET_FILTER, TOGGLE_SELECTED_ITEM } from \"../Actions/actionTypes\";\n\ninterface ItemsState {\n    inCurFolder: Item[];\n    filter: string;\n    selected: Item[];\n}\n\nconst initialItemsState: ItemsState = {\n    inCurFolder: [],\n    filter: '',\n    selected: [],\n};\n\nexport const items = (state = initialItemsState, action: Action<any>): ItemsState => {\n    switch(action.type) {\n        case SET_ITEMS:\n            return { ...state, inCurFolder: action.value as Item[] };\n        case SELECT_ITEMS:\n            return { ...state, selected: action.value as Item[] };\n        case DESELECT_ITEM:\n            return { ...state, selected: removeItem(state.selected, action.value as Item) };\n        case TOGGLE_SELECTED_ITEM:\n            return { \n                ...state,\n                selected: state.selected.includes(action.value) ?\n                    removeItem(state.selected, action.value as Item)\n                    : addItem(state.selected, action.value as Item)\n            };\n        case FILTER_ITEMS:\n            return { ...state, filter: action.value as string };\n        case RESET_FILTER:\n            return { ...state, filter: '' };\n        default:\n            return state;\n    }\n};\n\nconst removeItem = (items: Item[], item: Item) => {\n    return items.filter(selectedItem => !selectedItem.equals(item));\n}\n\nconst addItem = (items: Item[], item: Item) => {\n    return [...items, item];\n}","import { Action, ENTER_FOLDER, SET_PATH, MOVE_FOLDER_UPWARDS } from \"../Actions/actionTypes\";\n\n\nconst initialPath: string[] = [];\n\nexport const path = (state = initialPath, action: Action<any>): typeof initialPath => {\n    switch(action.type) {\n        case ENTER_FOLDER:\n            return [...state, action.value];\n        case MOVE_FOLDER_UPWARDS:\n            return action.value > 0 ?\n                state.slice(0, -action.value)\n                : state;\n        case SET_PATH:\n            return [...action.value];\n        default:\n            return state;\n    }\n};","import { Action, SET_UPLOAD_FILE_LIST, SET_UPLOAD_FILE_PROGRESS } from \"../Actions/actionTypes\";\n\nconst initialUploadState = {\n    fileList: null as FileList|null,\n    progress: 0,\n};\n\nexport const upload = (state = initialUploadState, action: Action<FileList|number>): typeof initialUploadState => {\n    switch(action.type) {\n        case SET_UPLOAD_FILE_LIST:\n            return { ...state, fileList: action.value as FileList };\n        case SET_UPLOAD_FILE_PROGRESS:\n            return { ...state, progress: action.value as number };\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport { account } from './accountReducer';\nimport { blob } from './currentBlobReducer';\nimport { visibleDialogs, contextMenu } from './dialogsReducer';\nimport { errorMessage } from './errorReducer';\nimport { items } from './itemsReducer';\nimport { loading } from './loadingReducer';\nimport { path } from './pathReducer';\nimport { upload } from './uploadReducer';\n\nconst rootReducer = combineReducers({\n    account,\n    blob,\n    contextMenu,\n    visibleDialogs,\n    errorMessage,\n    items,\n    loading,\n    path,\n    upload,\n});\n\nexport default rootReducer;\nexport type AppState = ReturnType<typeof rootReducer>;","import { Action, SET_LOADED_BLOB, RESET_LOADED_BLOB } from \"../Actions/actionTypes\";\n\nexport const blob = (state: string|null = null, action: Action<Blob>): typeof state => {\n    switch(action.type) {\n        case SET_LOADED_BLOB:\n            return URL.createObjectURL(action.value);\n        case RESET_LOADED_BLOB:\n            if (state !== null)\n                URL.revokeObjectURL(state);\n            return null;\n        default:\n            return state;\n    }\n};","import { Action, SET_ERROR_MESSAGE } from \"../Actions/actionTypes\";\n\nexport const errorMessage = (state = '', action: Action<string>): typeof state => {\n    switch(action.type) {\n        case SET_ERROR_MESSAGE:\n            return action.value;\n        default:\n            return state;\n    }\n};","import { Action, DISPLAY_LOADING, STOP_LOADING } from \"../Actions/actionTypes\";\n\nconst initialLoadingState: boolean = false;\n\nexport const loading = (state = initialLoadingState, action: Action<void>): boolean => {\n    switch(action.type) {\n        case DISPLAY_LOADING:\n            return true;\n        case STOP_LOADING:\n            return false;\n        default:\n            return state;\n    }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: ServiceWorkerConfig) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: ServiceWorkerConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: ServiceWorkerConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n\nexport interface ServiceWorkerConfig {\n  onUpdate(registration: ServiceWorkerRegistration): void;\n  onSuccess(registration: ServiceWorkerRegistration): void;\n}","/**\n * Class for an arbitrary item from a solid pod\n */\nexport class Item {\n    _name: string;\n    _path: string[];\n    _url: string;\n    _size?: string\n\n    constructor(url: string, size?: string) {\n        const path = getPathFromUrl(url);\n\n        this._name = path.pop() || '';\n        this._path = path;\n        this._url = url;\n        this._size = size;\n    }\n\n    // Make properties readonly\n    get name() { return this._name; }\n    get path() { return this._path; }\n    get url() { return this._url; }\n    get size() { return this._size; }\n\n    equals(item: Item) {\n        return this.name === item.name\n            && this.path.length === item.path.length\n            && this.path.every((val, index) => val === item.path[index]);\n    }\n\n    getDisplayName() {\n        return decodeURI(this.name);\n    }\n\n    getDisplaySize() {\n        return this._size ? getHumanFileSize(this._size) : 'Unknown size';\n    }\n}\n\nexport class FileItem extends Item {\n    isImage() {\n        return patterns.image.test(this.name);\n    }\n\n    isMedia() {\n        return patterns.media.test(this.name);\n    }\n\n    isEditable() {\n        return patterns.editable.test(this.name);\n    }\n\n    isExtractable() {\n        return patterns.extractable.test(this.name);\n    }\n\n    isVideo() {\n        return patterns.video.test(this.name);\n    }\n}\n\nexport class FolderItem extends Item { }\n\n\n// regex patterns for testing if a file is of a specific type\nconst patterns = {\n    editable: /\\.(txt|diff?|patch|svg|asc|cnf|cfg|conf|html?|cfm|cgi|aspx?|ini|pl|py|md|css|cs|jsx?|jsp|log|htaccess|htpasswd|gitignore|gitattributes|env|json|atom|eml|rss|markdown|sql|xml|xslt?|sh|rb|as|bat|cmd|cob|for|ftn|frm|frx|inc|lisp|scm|coffee|php[3-6]?|java|c|cbl|go|h|scala|vb|tmpl|lock|go|yml|yaml|tsv|lst|ttl)$/i,\n    image: /\\.(jpe?g|gif|bmp|png|svg|tiff?)$/i,\n    media: /\\.(mp3|ogg|wav|mp4|webm)$/i,\n    video: /\\.(mp4|webm|ogg)$/i,\n    extractable: /\\.(zip)$/i\n};\n\n/**\n * Calculate file size by bytes in human readable format\n */\nexport const getHumanFileSize = (byteString: string|number): string => {\n    const bytes = typeof byteString === 'string' ?\n        parseInt(byteString)\n        : byteString;\n    const e = (Math.log(bytes) / Math.log(1e3)) | 0;\n    return +(bytes / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';\n};\n\n\n/**\n * Get path including the last element (e.g. [public, test, index.html])\n */\nconst getPathFromUrl = (urlString: string): string[] => {\n    const url = new URL(urlString);\n    return url.pathname.split('/').filter(val => val !== '');\n}","// eslint-disable-next-line no-unused-vars\nimport { Item } from './Item';\n\nexport default class ApiCache {\n    _data: Record<string, Item[]> = {};\n\n    /**\n     * Add data to the cache\n     */\n    add(path: string, itemList: Item[]): Item[] {\n        this._data[path] = itemList;\n        return itemList;\n    }\n\n    /**\n     * Return true if the url is already cached\n     */\n    contains(path: string): boolean {\n        return this._data.hasOwnProperty(path);\n    }\n\n    /**\n     * Get the cached data\n     */\n    get(path: string): Item[] {\n        return this._data[path];\n    }\n\n    /**\n     * Remove paths from the cache\n     */\n    remove(...paths: string[]) {\n        paths.filter(path => this.contains(path))\n            .forEach(path => delete this._data[path]);\n    }\n\n    /**\n     * Clear the whole cache\n     */\n    clear() {\n        this._data = {};\n    }\n}\n","import * as mime from 'mime';\n\nexport async function guessContentType(fileName: string, blob?: Blob | string, defaultType = 'text/turtle'): Promise<string> {\n  const extType = mime.getType(fileName)\n  if (extType)\n    return extType;\n  if (blob instanceof Blob) {\n    const blobType = await guessFromBlob(blob);\n    if (blobType)\n      return blobType;\n  }\n  return defaultType;\n};\n\nexport function guessFromBlob(blob: Blob): Promise<string | undefined> {\n  const fileReader = new FileReader();\n  return new Promise(resolve => {\n    fileReader.onloadend = e => {\n      if (e && e.target && e.target.readyState === FileReader.DONE) {\n        const arr = new Uint8Array(e.target.result as ArrayBuffer);\n        let header = '';\n        for (let i = 0; i < arr.length; i++)\n          header += arr[i].toString(16);\n        resolve(magicNumberToMime(header))\n      }\n    };\n    fileReader.readAsArrayBuffer(blob.slice(0, 4));\n  });\n}\n\n// TODO: Add more magic numbers\n// See https://en.wikipedia.org/wiki/List_of_file_signatures\nfunction magicNumberToMime(num: string): string | undefined {\n  switch (num) {\n    case \"89504e47\":\n      return \"image/png\";\n    case \"47494638\":\n      return \"image/gif\";\n    case \"ffd8ffe0\":\n    case \"ffd8ffe1\":\n    case \"ffd8ffe2\":\n    case \"ffd8ffe3\":\n    case \"ffd8ffe8\":\n      return \"image/jpeg\";\n  }\n  return undefined;\n}\n","import JSZip from 'jszip';\nimport { FileItem, FolderItem, Item } from './Item';\nimport ApiCache from './ApiCache';\nimport config from './../config';\nimport * as solidAuth from 'solid-auth-client';\nimport SolidFileClient from 'solid-file-client';\nimport { guessContentType } from './contentTypes';\n\nconst fileClient = new SolidFileClient(solidAuth, { enableLogging: true });\nconst cache = new ApiCache();\n\n/**\n * Log a fetch response error and throw it again\n * @param {*} error \n */\nconst handleFetchError = async (error: Error | Response | string) => {\n    let detailedErrorMessage = '';\n    let displayErrorMessage: string | undefined;\n\n    console.group('handleFetchError');\n    if (error instanceof Response) {\n        detailedErrorMessage = await error.text();\n\n        console.error(`url: ${error.url}`);\n        console.error(`status: ${error.status}`);\n\n        const displayMessages: Record<string, string> = {\n            '401': `The ressource at ${error.url} requires you to login.`,\n            '403': `You don't have permission to access the ressource at ${error.url}.\n            Please make sure that you are logged in with the correct account.\n            If the server runs with version 5.0.0 or higher, make sure you gave this app read/write permission`,\n            '404': `The ressource at ${error.url} was not found`,\n            '500': `An internal server error occured...\n            ${detailedErrorMessage}`,\n        };\n        if (error.status in displayMessages)\n            displayErrorMessage = displayMessages[error.status];\n    }\n    else if (error instanceof Error) {\n        detailedErrorMessage = error.message;\n        console.error(error.stack);\n    }\n    else if (typeof error === 'string') {\n        detailedErrorMessage = error;\n    }\n    else {\n        detailedErrorMessage = JSON.stringify(error);\n    }\n    console.error(`errorMessage: ${detailedErrorMessage}`);\n    console.error(`error: ${error}`);\n    console.groupEnd();\n\n    throw new Error((displayErrorMessage) ? displayErrorMessage : detailedErrorMessage);\n}\n\n/**\n * Clean path string removing double slashes and prepending a slash if non-empty\n */\nconst fixPath = (path: string): string => {\n    if (path === \"\")\n        return path;\n    return ('/' + path).replace(/\\/\\//g, '/');\n};\n\n/**\n * Wrap API response for retrieving item list\n * itemList is cached automatically\n * @param {String} path\n * @returns {Promise<Item[]>}\n */\nexport const getItemList = async (path: string): Promise<Item[]> => {\n    path = fixPath(path);\n    if (cache.contains(path))\n        return cache.get(path);\n\n    try {\n        const url = buildFolderUrl(path);\n        const folderData = await fileClient.readFolder(url, { links: SolidFileClient.LINKS.EXCLUDE })\n        const itemList = [\n            ...folderData.files.map(item => new FileItem(item.url)), // TODO: item.size\n            ...folderData.folders.map(item => new FolderItem(item.url)) // TODO: item.size\n        ]\n        cache.add(path, itemList);\n        return itemList\n    } catch (err) {\n        throw handleFetchError(err);\n    }\n};\n\nexport const clearCacheForFolder = (path: string) => cache.remove(fixPath(path));\nexport const clearCache = () => cache.clear();\n\n/**\n * Wrap API response for retrieving file content\n */\nexport const getFileBlob = async (path: string, filename: string): Promise<Blob> => {\n    path = fixPath(path);\n    try {\n        const res = await fileClient.get(buildFileUrl(path, filename));\n        return res.blob();\n    } catch (err) {\n        throw handleFetchError(err);\n    }\n};\n\n\n/**\n * Wrap API response for renaming a file\n */\nexport const renameFile = (path: string, fileName: string, newFileName: string): Promise<Response> => {\n    path = fixPath(path);\n    cache.remove(path);\n    return fileClient.rename(buildFileUrl(path, fileName), newFileName)\n        .then(res => Array.isArray(res) ? res[0] : res)\n        .catch(handleFetchError)\n};\n\n\n/**\n * Wrap API response for renaming a folder\n */\nexport const renameFolder = (path: string, folderName: string, newFolderName: string): Promise<Response> => {\n    path = fixPath(path);\n    cache.remove(path);\n    return fileClient.rename(buildFolderUrl(path, folderName), newFolderName)\n        .then(res => Array.isArray(res) ? res[0] : res)\n        .catch(handleFetchError)\n};\n\n/**\n * Wrap API response for creating a folder\n */\nexport const createFolder = (path: string, folderName: string): Promise<Response> => {\n    path = fixPath(path);\n    cache.remove(path);\n    if (!(folderName || '').trim()) {\n        return Promise.reject('Invalid folder name');\n    }\n    return fileClient.createFolder(buildFolderUrl(path, folderName), {\n        merge: SolidFileClient.MERGE.KEEP_TARGET\n    })\n        .catch(handleFetchError)\n};\n\n/**\n * Fetch API to remove one item\n */\nexport async function removeItem(path: string, itemName: string): Promise<Response> { // TODO: use fileClient\n    const url = buildFileUrl(path, itemName);\n\n    return fileClient.delete(url)\n        .catch(err => {\n            if (err.status === 409 || err.status === 301) {\n                // Solid pod returns 409 if the item is a folder and is not empty\n                // Solid pod returns 301 if is attempted to read a folder url without '/' at the end (from buildFileUrl)\n                return fileClient.deleteFolderRecursively(buildFolderUrl(path, itemName));\n            }\n            else if (err.status === 404) {\n                // Don't throw if the item didn't exist\n                return err;\n            }\n            else\n                throw err\n        })\n}\n\n/**\n * Wrap API response for removing a file or folder\n */\nexport const removeItems = (path: string, filenames: string[]): Promise<Response[]> => {\n    path = fixPath(path);\n    cache.remove(path);\n    if (!filenames.length) {\n        return Promise.reject('No files to remove');\n    }\n    return Promise.all(filenames.map(name => removeItem(path, name)))\n        .catch(handleFetchError);\n};\n\n/**\n * Wrap API response for moving a file or folder\n */\nexport const moveItems = (path: string, destination: string, filenames: string[]): Promise<Response[]> => {\n    path = fixPath(path);\n    destination = fixPath(destination);\n    cache.remove(path, destination);\n    if (!filenames.length) {\n        return Promise.reject('No files to move');\n    }\n\n    return copyItems(path, destination, filenames)\n        .then(res => removeItems(path, filenames))\n        .catch(handleFetchError)\n};\n\n/**\n * Wrap API response for copying a file or folder\n */\nexport const copyItems = async (path: string, destination: string, filenames: string[]): Promise<Response[]> => {\n    path = fixPath(path);\n    destination = fixPath(destination);\n    cache.remove(path, destination);\n    if (!filenames.length) {\n        return Promise.reject('No files to copy');\n    }\n\n    const items = await getItemList(path)\n        .then(items => items.filter(({ name }) => filenames.includes(name)))\n    const promises = items.map(item => item instanceof FolderItem ?\n        fileClient.copyFolder(buildFolderUrl(path, item.name), buildFolderUrl(destination, name), {\n            withAcl: false,\n            withMeta: true,\n            createPath: true,\n            merge: SolidFileClient.MERGE.KEEP_SOURCE\n        })\n        : fileClient.copyFile(buildFileUrl(path, item.name), buildFileUrl(destination, item.name), {\n            withAcl: false,\n            withMeta: true,\n            createPath: true,\n            merge: SolidFileClient.MERGE.REPLACE\n        }))\n        .flat(1) as Response[]\n    \n    return Promise.all(promises).catch(handleFetchError);\n};\n\n/**\n * Wrap API response for uploading files\n */\nexport const uploadFiles = async (path: string, fileList: FileList): Promise<Response[]> => {\n    path = fixPath(path);\n    cache.remove(path);\n\n    if (!fileList.length) {\n        return Promise.reject('No files to upload');\n    }\n    const promises = Array.from(fileList).map(file => {\n      const contentType = file.type || guessContentType(file.name, file)\n      return updateFile(path, file.name, file, file.type)\n    });\n    return Promise.all(promises).catch(handleFetchError);\n};\n\n/**\n * Wrap API response for uploading a file\n */\nexport const updateFile = (path: string, fileName: string, content: Blob|string, contentType: string): Promise<Response> => {\n    path = fixPath(path);\n    cache.remove(path);\n    return fileClient.putFile(buildFileUrl(path, fileName), content, contentType)\n        .catch(handleFetchError);\n};\n\n/**\n * Wrap API response for zipping multiple items\n */\nexport const getAsZip = (path: string, itemList: Item[]): Promise<JSZip> => {\n    path = fixPath(path);\n    const zip = new JSZip();\n\n    return addItemsToZip(zip, path, itemList)\n        .then(() => zip);\n}\n\n/**\n * Add items to a zip object recursively\n */\nconst addItemsToZip = (zip: JSZip, path: string, itemList: Item[]): Promise<void[]> => {\n    const promises = itemList.map(async item => {\n        if (item instanceof FolderItem) {\n            const zipFolder = zip.folder(item.name);\n            const folderPath = `${path}/${item.name}`;\n            const folderItems = await getItemList(folderPath);\n            await addItemsToZip(zipFolder, folderPath, folderItems);\n        }\n        else if (item instanceof FileItem) {\n            const blob = await getFileBlob(path, item.name);\n            zip.file(item.name, blob, { binary: true });\n        }\n    });\n\n    return Promise.all(promises);\n}\n\n/**\n * Wrap API response for extracting a zip archive\n */\nexport const extractZipArchive = async (path: string, destination: string = path, fileName: string) => {\n    const blob = await getFileBlob(path, fileName);\n    const zip = await JSZip.loadAsync(blob);\n\n    return uploadExtractedZipArchive(zip, destination);\n};\n\n/**\n * Recursively upload all files and folders from an extracted zip archive\n */\nasync function uploadExtractedZipArchive(zip: JSZip, destination: string, curFolder = ''): Promise<void[]> {\n    const promises = getItemsInZipFolder(zip, curFolder)\n        .map(async item => {\n            const relativePath = item.name;\n            const itemName = getItemNameFromPath(relativePath);\n            const path = getParentPathFromPath(`${destination}/${relativePath}`);\n\n            if (item.dir) {\n                await createFolder(path, itemName);\n                await uploadExtractedZipArchive(zip, destination, relativePath);\n            }\n            else {\n                const blob = await item.async('blob');\n                const contentType = blob.type ? blob.type : await guessContentType(item.name, blob);\n                await updateFile(path, itemName, blob, contentType);\n            }\n        });\n\n    return Promise.all(promises);\n};\n\nfunction getItemsInZipFolder(zip: JSZip, folderPath: string): JSZip.JSZipObject[] {\n    return Object.keys(zip.files)\n        .filter(fileName => {\n            // Only items in the current folder and subfolders\n            const relativePath = fileName.slice(folderPath.length, fileName.length);\n            if (!relativePath || fileName.slice(0, folderPath.length) !== folderPath)\n                return false;\n            \n            // No items from subfolders\n            if (relativePath.includes('/') && relativePath.slice(0, -1).includes('/'))\n                return false;\n\n            return true;\n        })\n        .map(key => zip.files[key]);\n};\n\nfunction getItemNameFromPath(path: string): string {\n    path = path.endsWith('/') ? path.slice(0, -1) : path;\n    return path.substr(path.lastIndexOf('/') + 1);\n}\n\nfunction getParentPathFromPath(path: string): string {\n    path = path.endsWith('/') ? path.slice(0, -1) : path;\n    path = path.substr(0, path.lastIndexOf('/'));\n    return path;\n}\n\n/**\n * Build up an url from a path relative to the storage location and a folder name\n */\nfunction buildFolderUrl(path: string, folderName?: string): string {\n    return buildFileUrl(path, folderName) + '/';\n}\n\n\n/**\n * Build up an url from a path relative to the storage location and a fileName\n */\nfunction buildFileUrl(path: string, fileName?: string): string {\n    let url = `${config.getHost()}${path}/${fileName || ''}`;\n    while (url.slice(-1) === '/')\n        url = url.slice(0, -1);\n\n    return url;\n}\n","import * as APIHandler from '../Api/ApiHandler';\nimport * as solidAuth from 'solid-auth-client';\nimport { Item, FileItem, FolderItem } from '../Api/Item';\nimport { Action, SET_LOGGED_IN, SET_LOGGED_OUT, SET_HOST, SET_ITEMS, SET_WEB_ID, SELECT_ITEMS, TOGGLE_SELECTED_ITEM, DESELECT_ITEM, FILTER_ITEMS, RESET_FILTER, DISPLAY_LOADING, STOP_LOADING, DIALOGS, OPEN_DIALOG, CLOSE_DIALOG, SET_LOADED_BLOB, SET_UPLOAD_FILE_LIST, SET_UPLOAD_FILE_PROGRESS, SET_PATH, MOVE_FOLDER_UPWARDS, RESET_LOADED_BLOB, RESET_HOST, RESET_WEB_ID, SET_ERROR_MESSAGE, OPEN_CONTEXT_MENU, CLOSE_CONTEXT_MENU } from './actionTypes';\nimport { AppState } from '../Reducers/reducer';\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\nimport { guessContentType } from '../Api/contentTypes';\nimport { version } from '../../package.json';\n\n\nexport type MyThunk = ThunkAction<void, AppState, null, Action<any>>;\nexport type MyDispatch = ThunkDispatch<AppState, null, Action<any>>;\n\nexport const initApp = (): MyThunk => (dispatch, getState) => {\n    console.log(`Starting Solid-Filemanager v${version}`);\n    dispatch(updateLoginStatus());\n    dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\n};\n\n\nexport const solidLogin = (): MyThunk => (dispatch, getState) => {\n    dispatch(displayLoading());\n\n    solidPopupLogin()\n        .then(session => dispatch(updateLoginStatus(session)))\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\nexport const updateLoginStatus = (session?: Session|null): MyThunk => async (dispatch, getState) => {\n    session = session || await solidAuth.currentSession();\n    if (!session) {\n        dispatch(setLoggedOut());\n        dispatch(resetWebId());\n    }\n    else {\n        dispatch(setWebId(session.webId));\n        dispatch(setLoggedIn());\n    }\n}\n\nasync function solidPopupLogin() {\n    return solidAuth.popupLogin({ popupUri: './vendor/solid-auth-client/popup.html' });\n}\n\n\nexport const solidLogout = (): MyThunk => (dispatch, getState) => {\n    dispatch(displayLoading());\n\n    solidAuth.logout()\n        .then(() => {\n            dispatch(resetPath());\n            dispatch(resetItems());\n            dispatch(resetSelectedItems());\n            dispatch(setLoggedOut());\n            dispatch(resetWebId());\n\n            dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\n        })\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\nexport const clearCache = (): MyThunk => (dispatch, getState) => APIHandler.clearCache();\n\n\n/**\n * Request API to get file list for the selected path then refresh UI\n */\nexport const uploadFiles = (): MyThunk => (dispatch, getState) => {\n    const { path, upload: { fileList } } = getState();\n\n    if (fileList === null)\n        return dispatch(setErrorMessage(\"Couldn't find files to upload\"));\n\n    dispatch(displayLoading());\n    dispatch(resetSelectedItems());\n    dispatch(setFileUploadProgress(50));\n\n    APIHandler.uploadFiles(path.join('/'), fileList)\n        .then(r => {\n            dispatch(setFileUploadProgress(100));\n            setTimeout(f => {\n                dispatch(resetFileUploader());\n            }, 300);\n            dispatch(displayCurrentItemList());\n        })\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\n\nexport const createFile = (fileName: string, contentType?: string): MyThunk => async (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n\n    contentType = contentType ? contentType : await guessContentType(fileName);\n    APIHandler.updateFile(path.join('/'), fileName, new Blob(), contentType)\n        .then(r => {\n            dispatch(closeDialog(DIALOGS.CREATE_FILE));\n            dispatch(displayCurrentItemList());\n            dispatch(loadAndEditFile(fileName));\n            return APIHandler.getItemList(path.join('/'));\n        })\n        .then(itemList => itemList.find(item => item.getDisplayName() === fileName))\n        .then(item => {\n            if (!item)\n                throw new Error(\"Couldn't load created file for editing\");\n            dispatch(selectItem(item));\n            dispatch(getFileContent(item.name));\n        })\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\nexport const updateTextFile = (fileName: string, content: Blob|string, contentType?: string): MyThunk => async (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n\n    contentType = contentType ? contentType : await guessContentType(fileName, content);\n    APIHandler.updateFile(path.join('/'), fileName, content, contentType)\n        .then(r => {\n            dispatch(closeDialog(DIALOGS.EDIT));\n            dispatch(displayCurrentItemList());\n        })\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n}\n\n/**\n * Request API to display file list for the selected path\n */\nexport const displayCurrentItemList = (): MyThunk => (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n    dispatch(resetSelectedItems());\n    APIHandler.getItemList(path.join('/'))\n        .then(items => dispatch(setItems(items)))\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\n/**\n * Request API to reload the file list and then refresh UI\n */\nexport const refreshItemList = (): MyThunk => (dispatch, getState) => {\n    const { path } = getState();\n    APIHandler.clearCacheForFolder(path.join('/'));\n    return dispatch(displayCurrentItemList());\n};\n\n\n/**\n * Request API to rename file then dispatch defined events\n */\nexport const renameFile = (fileName: string, newFileName: string): MyThunk => (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n\n    APIHandler.renameFile(path.join('/'), fileName, newFileName)\n        .then(() => {\n            dispatch(displayCurrentItemList());\n            dispatch(closeDialog(DIALOGS.RENAME));\n        })\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\n/**\n * Request API to rename file then dispatch defined events\n */\nexport const renameFolder = (folderName: string, newFolderName: string): MyThunk => (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n\n    APIHandler.renameFolder(path.join('/'), folderName, newFolderName)\n        .then(() => {\n            dispatch(displayCurrentItemList());\n            dispatch(closeDialog(DIALOGS.RENAME));\n        })\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\n/**\n * Request API to download the specified items\n */\nexport const downloadItems = (items: Item[]): MyThunk => async (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n\n    try {\n        let blob;\n        let downloadName = items[0].name;\n        if (items.length === 1 && items[0] instanceof FileItem) {\n            blob = await APIHandler.getFileBlob(path.join('/'), items[0].name);\n        }\n        else {\n            const zip = await APIHandler.getAsZip(path.join('/'), items);\n            blob = await zip.generateAsync({ type: 'blob' });\n\n            if (items.length > 1)\n                downloadName = 'Archive';\n            downloadName = `${downloadName}.zip`;\n        }\n\n        promptDownload(blob, downloadName);\n    }\n    catch (e) {\n        dispatch(setErrorMessage(String(e)));\n    }\n    dispatch(stopLoading());\n};\n\n/**\n * Request API to upload the items as zip archive\n */\nexport const zipAndUpload = (items: Item[]): MyThunk => (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n\n    const archiveName = (items.length === 1 && items[0] instanceof FolderItem) ?\n        `${items[0].name}.zip`\n        : 'Archive.zip';\n\n    APIHandler.getAsZip(path.join('/'), items)\n        .then(zip => zip.generateAsync({ type: 'blob' }))\n        .then(blob => APIHandler.updateFile(path.join('/'), archiveName, blob, 'application/zip'))\n        .then(() => dispatch(displayCurrentItemList()))\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\n/**\n * Request API for extracting a zip archive\n */\nexport const extractZipFile = (fileName: string): MyThunk => (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n\n    APIHandler.extractZipArchive(path.join('/'), path.join('/'), fileName)\n        .then(r => dispatch(displayCurrentItemList()))\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\n// code based on https://stackoverflow.com/a/30832210/6548154\nfunction promptDownload(file: Blob, fileName: string) {\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\n        window.navigator.msSaveOrOpenBlob(file, fileName);\n    else { // Others\n        const a = document.createElement(\"a\");\n        const url = URL.createObjectURL(file);\n        a.href = url;\n        a.download = fileName;\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(() => {\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }, 0);\n    }\n}\n\n/**\n * Opens the item in a new tab\n */\nexport const openInNewTab = (item: Item): MyThunk => (dispatch, getState) => {\n    window.open(item.url, '_blank');\n};\n\n\n/**\n * Request API to get file content then dispatch defined events\n */\nexport const getFileContent = (fileName: string): MyThunk => (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n    dispatch(resetFileContent());\n\n    APIHandler.getFileBlob(path.join('/'), fileName)\n        .then(blob => dispatch(setFileContent(blob)))\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\n\n/**\n * Request API to get file content and open the edit dialogue\n */\nexport const loadAndEditFile = (fileName: string): MyThunk => (dispatch, getState) => {\n    dispatch(getFileContent(fileName));\n    dispatch(openDialog(DIALOGS.EDIT));\n};\n\n\n/**\n * Request API to get file content and display it\n */\nexport const loadAndDisplayFile = (fileName: string): MyThunk => (dispatch, getState) => {\n    dispatch(getFileContent(fileName));\n    dispatch(openDialog(DIALOGS.CONTENT));\n};\n\n\n/**\n * Request API to display an audio or video file\n */\nexport const displaySelectedMediaFile = (): MyThunk => (dispatch, getState) => {\n    dispatch(openDialog(DIALOGS.MEDIA));\n};\n\n\n/**\n * Request API to create a folder then dispatch defined events\n */\nexport const createNewFolder = (folderName: string): MyThunk => (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n\n    APIHandler.createFolder(path.join('/'), folderName)\n        .then(r => {\n            dispatch(displayCurrentItemList());\n            dispatch(closeDialog(DIALOGS.CREATE_FOLDER));\n        })\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\n\n/**\n * Request API to remove multiple items\n */\nexport const removeItems = (items: Item[]): MyThunk => (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n\n    const itemNames = items.map(f => f.name);\n\n    APIHandler.removeItems(path.join('/'), itemNames)\n        .then(r => dispatch(displayCurrentItemList()))\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\n\n/**\n * Request API to move multiple items\n */\nexport const moveItems = (items: Item[], { host, path: targetPath }: { host: string, path: string[] }): MyThunk => (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n\n\n    const destination = targetPath.join('/');\n    const itemNames = items.map(f => f.name);\n\n    APIHandler.moveItems(path.join('/'), destination, itemNames)\n        .then(r => {\n            dispatch(displayCurrentItemList());\n            dispatch(closeDialog(DIALOGS.MOVE));\n        })\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\n\n/**\n * Request API to copy an item then dispatch defined events\n */\nexport const copyItems = (items: Item[], { host, path: targetPath }: { host: string, path: string[] }): MyThunk => (dispatch, getState) => {\n    const { path } = getState();\n    dispatch(displayLoading());\n\n    const destination = targetPath.join('/');\n    const itemNames = items.map(f => f.name);\n\n    APIHandler.copyItems(path.join('/'), destination, itemNames)\n        .then(r => {\n            dispatch(displayCurrentItemList());\n            dispatch(closeDialog(DIALOGS.COPY));\n        })\n        .catch(r => dispatch(setErrorMessage(String(r))))\n        .finally(() => dispatch(stopLoading()));\n};\n\n\n/**\n * This handles multiple selection by using shift key\n */\nexport const setSelectedItemsFromLastTo = (lastFile: Item): MyThunk => (dispatch, getState) => {\n    const { items: { inCurFolder: items, selected: selectedItems } } = getState();\n\n    const lastPreviouslySelected = [...selectedItems].pop();\n    if (!lastPreviouslySelected)\n        return dispatch(setErrorMessage(\"Couldn't enlarge selection because no items were previously selected\"));\n\n    const lastPreviouslySelectedIndex = items.indexOf(lastPreviouslySelected);\n    const lastSelectedIndex = items.indexOf(lastFile);\n\n    const isInRange = (num: number, start: number, end: number) => start <= num && num <= end;\n    const toAdd = lastSelectedIndex > lastPreviouslySelectedIndex ?\n        items.filter((item, index) => isInRange(index, lastPreviouslySelectedIndex, lastSelectedIndex))\n        : items.filter((item, index) => isInRange(index, lastSelectedIndex, lastPreviouslySelectedIndex));\n\n    dispatch(selectItems([...selectedItems, ...toAdd]));\n};\n\nexport const resetFileUploader = (): MyThunk => (dispatch, getState) => {\n    dispatch(setFileUploadProgress(0));\n    dispatch(closeDialog(DIALOGS.UPLOAD_FILE));\n    dispatch(resetFileUploadList());\n};\n\n\nexport const enterFolder = (path: string[]): MyThunk => (dispatch, getState) => {\n    dispatch(setPath(path));\n    dispatch(resetFilter());\n    dispatch(displayCurrentItemList());\n};\n\nexport const enterFolderByItem = (item: Item): MyThunk => (dispatch, getState) => {\n    const path = item.path;\n    // Open containing folder if it is a file\n    dispatch(enterFolder(item instanceof FileItem ? path : [...path, item.name]));\n};\n\nexport const moveFolderUpwardsAndRefresh = (n: number): MyThunk => (dispatch, getState) => {\n    dispatch(moveFolderUpwards(n));\n    dispatch(refreshItemList());\n};\n\nexport const rightClickOnFile = (item: Item): MyThunk => (dispatch, getState) => {\n    const { items: { selected } } = getState();\n    const isSelected = selected.includes(item);\n\n    !isSelected && dispatch(selectItem(item));\n};\n\n\n// Create action which can be dispatched\nconst makeActionCreator: <VALUE=void>(type: string) => (value: VALUE) => Action<VALUE> = <VALUE=void>(type: string) => (value: VALUE) => {\n    return {\n        type,\n        value\n    };\n};\n\nexport const moveFolderUpwards = makeActionCreator<number>(MOVE_FOLDER_UPWARDS);\nexport const setPath = makeActionCreator<string[]>(SET_PATH);\nexport const resetPath = () => setPath([]);\n\nexport const setLoggedIn = makeActionCreator(SET_LOGGED_IN);\nexport const setLoggedOut = makeActionCreator(SET_LOGGED_OUT);\nexport const setHost = makeActionCreator<string>(SET_HOST);\nexport const resetHost = makeActionCreator(RESET_HOST);\nexport const setWebId = makeActionCreator<string>(SET_WEB_ID);\nexport const resetWebId = makeActionCreator(RESET_WEB_ID);\n\nexport const setItems = makeActionCreator<Item[]>(SET_ITEMS);\nexport const resetItems = () => setItems([]);\n\nexport const selectItems = makeActionCreator<Item[]>(SELECT_ITEMS);\nexport const selectItem = (item: Item) => selectItems([item]);\nexport const resetSelectedItems = () => selectItems([]);\nexport const toggleSelectedItem = makeActionCreator<Item>(TOGGLE_SELECTED_ITEM);\nexport const deselectItem = makeActionCreator<Item>(DESELECT_ITEM);\n\nexport const filterItems = makeActionCreator<string>(FILTER_ITEMS);\nexport const resetFilter = makeActionCreator(RESET_FILTER);\n\n\nexport const displayLoading = makeActionCreator(DISPLAY_LOADING);\nexport const stopLoading = makeActionCreator(STOP_LOADING);\n\nexport const resetFileContent = makeActionCreator(RESET_LOADED_BLOB);\nexport const setFileContent = makeActionCreator<Blob>(SET_LOADED_BLOB);\nexport const setFileUploadList = makeActionCreator<FileList|null>(SET_UPLOAD_FILE_LIST);\nexport const resetFileUploadList = () => setFileUploadList(null);\nexport const setFileUploadProgress = makeActionCreator<number>(SET_UPLOAD_FILE_PROGRESS);\n\nexport const openDialog = makeActionCreator<DIALOGS>(OPEN_DIALOG);\nexport const closeDialog = makeActionCreator<DIALOGS>(CLOSE_DIALOG);\nexport const openContextMenu = makeActionCreator<{ x: number, y: number }>(OPEN_CONTEXT_MENU);\nexport const closeContextMenu = makeActionCreator(CLOSE_CONTEXT_MENU);\n\nexport const setErrorMessage = makeActionCreator<string>(SET_ERROR_MESSAGE);\nexport const resetErrorMessage = () => setErrorMessage('');\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    setSelectedItemsFromLastTo, loadAndEditFile, loadAndDisplayFile, displaySelectedMediaFile,\n    rightClickOnFile, enterFolderByItem, MyDispatch, openContextMenu, toggleSelectedItem, selectItems\n} from '../../Actions/Actions';\nimport './File.css';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\nimport blue from '@material-ui/core/colors/blue';\nimport { FileItem, Item } from '../../Api/Item';\nimport { AppState } from '../../Reducers/reducer';\n\nclass File extends Component<FileProps> {\n    render() {\n        const { isSelected, item, handleClick, handleDoubleClick, handleContextMenu } = this.props;\n        const avatarStyle = {\n            backgroundColor: isSelected ? blue['A200'] : undefined\n        };\n        const realSize = (item instanceof FileItem) ? item.getDisplaySize() : null;\n        return (\n            <div className=\"File\" onClick={handleClick} onDoubleClick={handleDoubleClick} onContextMenu={handleContextMenu} data-selected={isSelected}>\n                <ListItem>\n                    <ListItemAvatar>\n                        <Avatar style={avatarStyle}>\n                            { (item instanceof FileItem) ? <FileIcon /> : <FolderIcon />}\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText className=\"filename\" primary={item.getDisplayName()} secondary={realSize} />\n                </ListItem>\n            </div>\n        );\n    }\n}\n\n\ninterface FileOwnProps {\n    item: Item;\n}\ninterface StateProps {\n    isSelected: boolean;\n}\ninterface DispatchProps {\n    handleClick(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n    handleDoubleClick(): void;\n    handleContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n}\ninterface FileProps extends FileOwnProps, StateProps, DispatchProps {}\n\n\nconst mapStateToProps = (state: AppState, ownProps: FileOwnProps): StateProps => {\n    return {\n        isSelected: state.items.selected.includes(ownProps.item)\n    };\n};\n\n\nconst mapDispatchToProps = (dispatch: MyDispatch, ownProps: FileOwnProps): DispatchProps => {\n    return {\n        handleDoubleClick: () => {\n            const item = ownProps.item;\n\n            if (item instanceof FileItem) {\n                if (item.isEditable())\n                    dispatch(loadAndEditFile(item.name));\n                else if (item.isImage())\n                    dispatch(loadAndDisplayFile(item.name));\n                else if (item.isMedia())\n                    dispatch(displaySelectedMediaFile());\n            }\n            else\n                dispatch(enterFolderByItem(item));\n        },\n\n        handleContextMenu: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\n            event.preventDefault();\n            event.stopPropagation();\n\n            let x = 0;\n            let y = 0;\n\n            if (event.nativeEvent instanceof MouseEvent) {\n                x = event.nativeEvent.clientX;\n                y = event.nativeEvent.clientY;\n            }\n            else if (event.nativeEvent instanceof TouchEvent) {\n                x = event.nativeEvent.touches[0].pageX;\n                y = event.nativeEvent.touches[0].pageY;\n            }\n            else {\n                console.warn(\"Unknown click event\", event);\n            }\n\n            if (event.shiftKey) {\n                dispatch(setSelectedItemsFromLastTo(ownProps.item));\n            } else {\n                dispatch(rightClickOnFile(ownProps.item));\n            }\n            \n            dispatch(openContextMenu({ x, y }));\n        },\n\n        handleClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent) => {\n            event.stopPropagation();\n\n            if (event.ctrlKey) {\n                dispatch(toggleSelectedItem(ownProps.item));\n            } else if (event.shiftKey) {\n                dispatch(setSelectedItemsFromLastTo(ownProps.item));\n            } else {\n                dispatch(selectItems([ownProps.item]));\n            }\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(File);\n","import React from 'react';\nimport './FileListEmptyMessage.css';\n\nexport default function FileListEmptyMessage() {\n    return (\n        <div className=\"FileListEmptyMessage\">\n            No files in this folder\n        </div>\n    );\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, createStyles, Theme, WithStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\n\nconst styles = (theme: Theme) => createStyles({\n  progress: {\n    margin: theme.spacing.unit * 10,\n  },\n});\n\nfunction Loader(props: LoaderProps) {\n    return (\n        <Grid container justify=\"center\">\n            <CircularProgress className={props.classes.progress} color=\"secondary\" />\n        </Grid>\n    );\n}\n\ninterface LoaderProps extends WithStyles<typeof styles> {};\n\nexport default withStyles(styles)(Loader);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport File from '../File/File'; \nimport FileListEmptyMessage from './FileListEmptyMessage';\nimport Loader from '../Loader/Loader'; \nimport './FileList.css';\nimport { Item } from '../../Api/Item';\nimport { AppState } from '../../Reducers/reducer';\n\nclass FileList extends Component<FileListProps> {\n    render() {\n        const { items, isLoading } = this.props;\n        const itemComponents = items.map((item, key) => {\n            return <File item={item} key={key} />;\n        });\n\n        return <div className=\"FileList\">\n            { isLoading ? \n                <Loader /> : \n                itemComponents.length ? itemComponents : <FileListEmptyMessage />\n            }\n        </div>\n    }\n}\n\ninterface StateProps {\n    items: Item[];\n    isLoading: boolean;\n}\ninterface FileListProps extends StateProps {};\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    const items = state.items.inCurFolder\n        .filter(item => filterMatch(item.getDisplayName(), state.items.filter));\n\n    return {\n        items,\n        isLoading: state.loading,\n    };\n};\n\n\nconst mapDispatchToProps = () => ({});\n\nconst filterMatch = (first: string, second: string) => {\n    return first.toLocaleLowerCase().match(second.toLocaleLowerCase());\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileList);\n\n\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport CreateNewFolderIcon from '@material-ui/icons/CreateNewFolder';\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nfunction CreateFolderAction(props: CreateFolderActionProps) {\n    const {handleClick, handleClose} = props;\n\n    const handleCloseAfter = (callback: () => void) => () => {\n        callback();\n        handleClose();\n    };\n\n    return (\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\n            <ListItemIcon>\n                <CreateNewFolderIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Create folder\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface CreateFolderActionProps {\n    handleClick(): void;\n    handleClose(): void;\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {};\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: () => {\n            dispatch(openDialog(DIALOGS.CREATE_FOLDER));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateFolderAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nfunction CreateFileAction(props: CreateFileActionProps) {\n    const {handleClick, handleClose} = props;\n\n    const handleCloseAfter = (callback: () => void) => () => {\n        callback();\n        handleClose();\n    };\n\n    return (\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\n            <ListItemIcon>\n                <InsertDriveFileIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Create file\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface CreateFileActionProps {\n    handleClick(): void;\n    handleClose(): void;\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {};\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: () => {\n            dispatch(openDialog(DIALOGS.CREATE_FILE));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateFileAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nfunction UploadFileAction(props: UploadFileActionProps) {\n    const { handleClick, handleClose } = props;\n\n    const handleCloseAfter = (callback: () => void) => () => {\n        callback();\n        handleClose();\n    };\n\n    return (\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\n            <ListItemIcon>\n                <CloudUploadIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Upload files\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface UploadFileActionProps {\n    handleClick(): void;\n    handleClose(): void;\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {};\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: () => {\n            dispatch(openDialog(DIALOGS.UPLOAD_FILE));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadFileAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport FolderSharedIcon from '@material-ui/icons/FolderSharedOutlined';\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nfunction ChooseLocationAction(props: ChooseLocationActionProps) {\n    const { handleClick, handleClose } = props;\n\n    const handleCloseAfter = (callback: () => void) => () => {\n        callback();\n        handleClose();\n    };\n\n    return (\n        <MenuItem onClick={handleCloseAfter(handleClick)}>\n            <ListItemIcon>\n                <FolderSharedIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Choose root location\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface ChooseLocationActionProps {\n    handleClick(): void;\n    handleClose(): void;\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {};\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: () => {\n            dispatch(openDialog(DIALOGS.CHOOSE_LOCATION));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChooseLocationAction);\n","import React from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { connect } from 'react-redux';\nimport CreateFolderAction from '../ContextMenu/ContextMenuActions/CreateFolderAction';\nimport CreateFileAction from '../ContextMenu/ContextMenuActions/CreateFileAction';\nimport UploadFileAction from '../ContextMenu/ContextMenuActions/UploadFileAction';\nimport ChooseLocationAction from '../ContextMenu/ContextMenuActions/ChooseLocationAction';\n\nclass ThreeDotsMenu extends React.Component {\n  state = {\n    anchorEl: null as HTMLElement|null,\n  };\n\n  handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    this.setState({ anchorEl: event.currentTarget });\n  };\n\n  handleClose = () => {\n    this.setState({ anchorEl: null });\n  };\n\n  render() {\n    const { anchorEl } = this.state;\n\n    return (\n      <div style={{marginLeft:'1em'}}>\n        <IconButton color=\"inherit\" \n          aria-label=\"More\"\n          aria-owns={Boolean(anchorEl) ? 'long-menu' : undefined}\n          aria-haspopup=\"true\"\n          onClick={this.handleClick}>\n          <MoreVertIcon />\n        </IconButton>\n\n        <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={this.handleClose}>\n          <CreateFolderAction handleClose={this.handleClose} />\n          <CreateFileAction handleClose={this.handleClose} />\n          <UploadFileAction handleClose={this.handleClose} />\n          <ChooseLocationAction handleClose={this.handleClose} />\n        </Menu>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ThreeDotsMenu);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles, createStyles, Theme, WithStyles } from '@material-ui/core/styles';\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport Button from '@material-ui/core/Button';\nimport './BreadcrumbText.css';\n\nconst styles = (theme: Theme) => createStyles({\n  lastPath: {\n    display: 'block',\n    [theme.breakpoints.up('sm')]: {\n      display: 'none'\n    }\n  },\n  paths: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    }\n  }\n});\n\nclass BreadcrumbText extends Component<BreadcrumbTextProps> {\n\n    render() {\n        const { classes, handleClickPath, path, rootTitle, handleGoBack, canGoBack } = this.props;\n\n        const separator = <span>&gt;</span>;\n        const rootPath = <span onClick={() => handleClickPath(-1)} data-index={0}>\n            { rootTitle } { path.length ? separator : '' }\n        </span>;\n        const lastPath = [...path].pop() || rootTitle;\n\n        const directories = path.map((dir, index) => {\n            return <span key={index} data-index={index} onClick={(e) => handleClickPath(index)}>\n                <span>{dir}</span> { path.length -1 !== index ? separator : '' }&nbsp;\n            </span>\n        });\n\n        return (\n            <div className=\"BreadcrumbText\">\n                <div className={classes.lastPath}>\n                    <Button onClick={handleGoBack} color=\"inherit\" type=\"button\" style={{display: canGoBack ? 'inline-flex' : 'none'}}>\n                        <KeyboardArrowLeftIcon />\n                    </Button>\n                    {lastPath}\n                </div>\n                <div className={classes.paths}>{rootPath} {directories}</div>\n            </div>\n        );\n    }\n}\n\ninterface BreadcrumbTextProps extends WithStyles<typeof styles> {\n    handleClickPath(index: number): void;\n    handleGoBack(): void;\n    canGoBack: boolean;\n    path: string[];\n    rootTitle: string;\n\n}\n\nconst mapDispatchToProps = () => ({});\n\nconst mapStateToProps = () => ({});\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(BreadcrumbText));\n","import React, { ChangeEvent } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { connect } from 'react-redux';\nimport { refreshItemList, moveFolderUpwardsAndRefresh, filterItems, MyDispatch } from '../../Actions/Actions';\nimport ThreeDotsMenu from './ThreeDotsMenu';\nimport BreadcrumbText from '../Breadcrumb/BreadcrumbText';\nimport { AppState } from '../../Reducers/reducer';\n\nconst styles = (theme: Theme) => createStyles({\n  root: {\n    width: '100%',\n    marginBottom: '4.3em'\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  title: {\n    display: 'block', // was none\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing.unit,\n      width: 'auto',\n      display: 'block'\n    },\n  },\n  searchIcon: {\n    width: theme.spacing.unit * 9,\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n    width: '100%',\n  },\n  inputInput: {\n    paddingTop: theme.spacing.unit,\n    paddingRight: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n    paddingLeft: theme.spacing.unit * 10,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 100,\n      '&:focus': {\n        width: 200,\n      },\n    },\n  },\n});\n\nfunction SearchAppBar(props: SearchAppBarProps) {\n  const { classes, path, filter, moveUpwards, canGoBack, handleChange, handleRefresh } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\n            <BreadcrumbText \n                path={path} \n                handleClickPath={index => moveUpwards(path.length - index - 1)} \n                handleGoBack={() => moveUpwards(1)}\n                canGoBack={canGoBack}\n                rootTitle=\"Solid Filemanager\"\n            />\n          </Typography>\n          <div className={classes.grow} />\n\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Search…\"\n              value={filter}\n              onChange={handleChange}\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n            />\n          </div>\n          <IconButton color=\"inherit\" aria-label=\"Refresh\" onClick={handleRefresh}>\n            <RefreshIcon/>\n          </IconButton>\n          <ThreeDotsMenu />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\ninterface StateProps {\n  filter: string;\n  path: string[];\n  canGoBack: boolean; \n}\ninterface DispatchProps {\n  handleChange(event: ChangeEvent<HTMLInputElement>): void;\n  moveUpwards(n: number): void;\n  handleRefresh(): void;\n}\ninterface SearchAppBarProps extends StateProps, DispatchProps, WithStyles<typeof styles> {\n\n}\n\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    return {\n        filter: state.items.filter,\n        path: state.path,\n        canGoBack: state.path.length > 0,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        handleChange: (event) => {\n            dispatch(filterItems(event.currentTarget.value));\n        },\n        moveUpwards: (n) => {\n          console.log('moveUpwards', n);\n          dispatch(moveFolderUpwardsAndRefresh(n));\n        },\n        handleRefresh: () => dispatch(refreshItemList())\n    };\n};\n\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(SearchAppBar));\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport { loadAndDisplayFile, displaySelectedMediaFile, loadAndEditFile, enterFolderByItem, MyDispatch } from '../../../Actions/Actions';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\nimport { FileItem, FolderItem, Item } from '../../../Api/Item';\nimport { AppState } from '../../../Reducers/reducer';\n\nfunction OpenAction(props: OpenActionProps) {\n    const { handleClick, selectedItems } = props;\n    return (\n        <MenuItem onClick={() => handleClick(selectedItems)}>\n            <ListItemIcon>\n                <OpenInBrowserIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Open\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface OpenActionProps {\n    handleClick(selectedItems: Item[]): void;\n    selectedItems: Item[];\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        selectedItems: state.items.selected\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: (selectedItems: Item[]) => {\n            const item = selectedItems[0];\n\n            if (item instanceof FolderItem)\n                dispatch(enterFolderByItem(item));\n            else if (item instanceof FileItem) {\n                if (item.isEditable())\n                    dispatch(loadAndEditFile(item.name));\n                else if (item.isImage())\n                    dispatch(loadAndDisplayFile(item.name));\n                else if (item.isMedia())\n                    dispatch(displaySelectedMediaFile());\n            }\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport { removeItems, MyDispatch } from '../../../Actions/Actions';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Item } from '../../../Api/Item';\nimport { AppState } from '../../../Reducers/reducer';\n\nfunction RemoveAction(props: RemoveActionProps) {\n    const { handleClick, selectedItems } = props;\n    return (\n        <MenuItem onClick={() => handleClick(selectedItems)}>\n            <ListItemIcon>\n                <DeleteIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Remove\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface RemoveActionProps {\n    handleClick(selectedItems: Item[]): void;\n    selectedItems: Item[];\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        selectedItems: state.items.selected\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: (selectedItems: Item[]) => {\n            dispatch(removeItems(selectedItems));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nfunction MoveAction(props: MoveActionProps) {\n    const { handleClick } = props;\n\n    return (\n        <MenuItem onClick={() => handleClick()}>\n            <ListItemIcon>\n                <HowToVoteIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Move\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface MoveActionProps {\n    handleClick(): void;\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {};\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: () => {\n            dispatch(openDialog(DIALOGS.MOVE));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS, Action } from '../../../Actions/actionTypes';\n\nfunction CopyAction(props: CopyActionProps) {\n    const { handleClick } = props;\n\n    return (\n        <MenuItem onClick={handleClick}>\n            <ListItemIcon>\n                <FileCopyIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Copy\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface CopyActionProps {\n    handleClick(): void;\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {};\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: () => {\n            dispatch(openDialog(DIALOGS.COPY));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport { loadAndEditFile, MyDispatch } from '../../../Actions/Actions';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\nimport { Item } from '../../../Api/Item';\nimport { AppState } from '../../../Reducers/reducer';\n\nfunction OpenAction(props: OpenActionProps) {\n    const { handleClick, selectedItems } = props;\n    return (\n        <MenuItem onClick={() => handleClick(selectedItems)}>\n            <ListItemIcon>\n                <OpenInBrowserIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Edit\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface OpenActionProps {\n    handleClick(selectedItems: Item[]): void;\n    selectedItems: Item[];\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        selectedItems: state.items.selected\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: (selectedItems: Item[]) => {\n            dispatch(loadAndEditFile(selectedItems[0].name));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport WrapTextIcon from '@material-ui/icons/WrapText';\nimport { openDialog, MyDispatch } from '../../../Actions/Actions';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nfunction MoveAction(props: MoveActionProps) {\n    const { handleClick } = props;\n\n    return (\n        <MenuItem onClick={handleClick}>\n            <ListItemIcon>\n                <WrapTextIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Rename\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface MoveActionProps {\n    handleClick(): void;\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {};\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: () => {\n            dispatch(openDialog(DIALOGS.RENAME));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport ArchiveIcon from '@material-ui/icons/Archive';\nimport { zipAndUpload, MyDispatch } from '../../../Actions/Actions';\nimport { Item } from '../../../Api/Item';\nimport { AppState } from '../../../Reducers/reducer';\n\nfunction ZipAction(props: ZipActionProps) {\n    const { handleClick, selectedItems } = props;\n\n    return (\n        <MenuItem onClick={() => handleClick(selectedItems)}>\n            <ListItemIcon>\n                <ArchiveIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Zip here\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface ZipActionProps {\n    handleClick(selectedItems: Item[]): void;\n    selectedItems: Item[];\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        selectedItems: state.items.selected\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: (selectedItems: Item[]) => {\n            dispatch(zipAndUpload(selectedItems));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ZipAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport UnarchiveIcon from '@material-ui/icons/Unarchive';\nimport { extractZipFile, MyDispatch } from '../../../Actions/Actions';\nimport { AppState } from '../../../Reducers/reducer';\nimport { Item } from '../../../Api/Item';\n\nfunction ExtractAction(props: ExtractActionProps) {\n    const {handleClick, selectedItems} = props;\n\n    return (\n        <MenuItem onClick={() => handleClick(selectedItems)}>\n            <ListItemIcon>\n                <UnarchiveIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Extract here\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface ExtractActionProps {\n    handleClick(selectedItems: Item[]): void;\n    selectedItems: Item[];\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        selectedItems: state.items.selected\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: (selectedItems: Item[]) => {\n            dispatch(extractZipFile(selectedItems[0].name));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtractAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport { downloadItems, MyDispatch } from '../../../Actions/Actions';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport { FileItem, Item } from '../../../Api/Item';\nimport { AppState } from '../../../Reducers/reducer';\n\nfunction DownloadAction(props: DownloadActionProps) {\n    const { handleClick, selectedItems } = props;\n    return (\n        <MenuItem onClick={() => handleClick(selectedItems)}>\n            <ListItemIcon>\n                <CloudDownloadIcon />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                {(selectedItems.length === 1 && selectedItems[0] instanceof FileItem) ? \n                    'Download'\n                    : 'Download Zip'\n                }\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface DownloadActionProps {\n    handleClick(selectedItems: Item[]): void;\n    selectedItems: Item[];\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        selectedItems: state.items.selected\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: (selectedItems: Item[]) => {\n            dispatch(downloadItems(selectedItems));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DownloadAction);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\nimport { openInNewTab, MyDispatch } from '../../../Actions/Actions';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport LinkIcon from '@material-ui/icons/Link';\nimport { Item } from '../../../Api/Item';\nimport { AppState } from '../../../Reducers/reducer';\n\nfunction OpenInNewTabAction(props: OpenInNewTabActionProps) {\n    const { handleClick, selectedItems } = props;\n    return (\n        <MenuItem onClick={() => handleClick(selectedItems)}>\n            <ListItemIcon>\n                <LinkIcon   />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">\n                Open in new Tab\n            </Typography>\n        </MenuItem>        \n    );\n}\n\ninterface OpenInNewTabActionProps {\n    handleClick(selectedItems: Item[]): void;\n    selectedItems: Item[];\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        selectedItems: state.items.selected\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch) => {\n    return {\n        handleClick: (selectedItems: Item[]) => {\n            dispatch(openInNewTab(selectedItems[0]));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenInNewTabAction);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './ContextMenu.css';\nimport Menu from '@material-ui/core/Menu';\nimport OpenAction from './ContextMenuActions/OpenAction';\nimport RemoveAction from './ContextMenuActions/RemoveAction';\nimport MoveAction from './ContextMenuActions/MoveAction';\nimport CopyAction from './ContextMenuActions/CopyAction';\nimport EditAction from './ContextMenuActions/EditAction';\nimport RenameAction from './ContextMenuActions/RenameAction';\nimport ZipAction from './ContextMenuActions/ZipAction';\nimport ExtractAction from './ContextMenuActions/ExtractAction';\nimport DownloadAction from './ContextMenuActions/DownloadAction';\nimport OpenInNewTabAction from './ContextMenuActions/OpenInNewTabAction';\nimport { Item, FileItem, FolderItem } from '../../Api/Item';\nimport { AppState } from '../../Reducers/reducer';\n\nclass ContextMenu extends Component<ContextMenuProps> {\n\n    render() {\n        const { acts, open, x, y } = this.props;\n\n        return (\n            <div>\n                <Menu\n                    anchorReference=\"anchorPosition\"\n                    anchorPosition={{ top: y, left: x }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'left',\n                    }}\n                    open={open}\n                    onClose={() => { }}\n                    PaperProps={{ style: { width: 190 } }}>\n                    {acts.includes('open') && <OpenAction />}\n                    {acts.includes('openInNewTab') && <OpenInNewTabAction />}\n                    {acts.includes('download') && <DownloadAction />}\n                    {acts.includes('compress') && <ZipAction />}\n                    {acts.includes('extract') && <ExtractAction />}\n                    {acts.includes('edit') && <EditAction />}\n                    {acts.includes('copy') && <CopyAction />}\n                    {acts.includes('move') && <MoveAction />}\n                    {acts.includes('rename') && <RenameAction />}\n                    {acts.includes('remove') && <RemoveAction />}\n                </Menu>\n            </div>\n        );\n    }\n}\n\ninterface StateProps {\n    acts: string[];\n    open: boolean;\n    x: number;\n    y: number;\n}\ninterface ContextMenuProps extends StateProps {}\n\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    return {\n        x: state.contextMenu.x,\n        y: state.contextMenu.y,\n        open: state.contextMenu.open,\n        acts: getActionsForMultipleItems(state.items.selected),\n    };\n};\n\nconst mapDispatchToProps = () => ({});\n\n\n/**\n * Get available actions for multiple items\n */\nconst getActionsForMultipleItems = (items: Item[]): string[] => {\n    return items.length === 1 ?\n        getActionsForItem(items[0])\n        : [\n            'copy',\n            'move',\n            'remove',\n            'download',\n            'compress',\n        ];\n};\n\n/**\n * Get available actions for an item\n */\nconst getActionsForItem = (item: Item) => {\n    const commonActions = [\n        'openInNewTab',\n        'copy',\n        'move',\n        'rename',\n        'remove',\n        'download',\n    ];\n    return [\n        ...commonActions,\n        ...((item instanceof FileItem) ?\n            getActionsForFile(item)\n            : getActionsForFolder(item))\n    ];\n};\n\n/**\n * Get available file specific actions\n */\nconst getActionsForFile = (file: FileItem) => {\n    const actions = [];\n    file.isEditable() && actions.push('edit');\n    file.isExtractable() && actions.push('extract');\n    (file.isImage() || file.isMedia()) && actions.push('open');\n\n    return actions;\n};\n\n/**\n * Get available folder specific actions\n */\nconst getActionsForFolder = (folder: FolderItem) => {\n    return [\n        'open',\n        'compress'\n    ];\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContextMenu);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createBrowserHistory, History, Location } from \"history\";\nimport { MyDispatch, setHost, enterFolder } from \"../../Actions/Actions\";\nimport { AppState } from \"../../Reducers/reducer\";\n\nclass HistoryHandler extends Component<HistoryHandlerProps> {\n    private history: History<LocationState>;\n    private states: LocationState[];\n    private stateIndex: number;\n\n    constructor(props: HistoryHandlerProps) {\n        super(props);\n\n        this.states = [];\n        this.stateIndex = -1;\n        this.history = createBrowserHistory();\n        this.history.listen((location, action) => {\n            switch(action) {\n                case 'POP':\n                    this.handlePop(location);\n                    break;\n                case 'REPLACE':\n                    this.handleReplace(location);\n                    break;\n                case 'PUSH':\n                    this.handlePush(location);\n                    break;\n            }\n        });\n    }\n\n    componentDidUpdate() {\n        const { host, path } = this.props;\n\n        // Don't update history when the host is invalid\n        if (host === null)\n            return;\n        if (this.states.length === 0 || this.stateIndex < 0)\n            return this.updateBrowserHistory();\n        \n        const prevState = this.states[this.stateIndex];\n\n        if (!locationsEqual({ host, path }, prevState))\n            this.updateBrowserHistory();\n    }\n\n    updateBrowserHistory() {\n        const { host, path } = this.props;\n        const url = encodeURI(`${host}/${path.join('/')}`);\n        const newState = {\n            host: host || '',\n            path,\n            index: this.stateIndex + 1,\n        };\n\n        this.history.push(`?url=${url}`, newState);\n    }\n\n    handlePop(location: Location<LocationState>) {\n        this.stateIndex = location.state.index;\n        this.props.handlePop(location);\n    }\n\n    handleReplace(location: Location<LocationState>) {\n        this.states[this.stateIndex] = location.state;\n    }\n\n    handlePush(location: Location<LocationState>) {\n        this.states = [...this.states.slice(0, ++this.stateIndex), location.state];\n    }\n\n    render() {\n        // This Component doesn't provide anything to the DOM\n        // The only reason it is a component is to get access to the state and dispatch\n        return <></>;\n    }\n}\n\ninterface LocationState extends MyLocation {\n    index: number;\n}\ninterface MyLocation {\n    host: string;\n    path: string[];\n}\n\n\ninterface StateProps {\n    host: string | null;\n    path: string[];\n}\ninterface DispatchProps {\n    handlePop(location: Location<LocationState>): void;\n}\ninterface HistoryHandlerProps extends StateProps, DispatchProps { }\n\n\nconst mapStateToProps = (state: AppState): StateProps => ({\n    host: state.account.host,\n    path: state.path\n});\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        handlePop: (location: Location<LocationState>) => {\n            let host = '';\n            let path: string[] = [];\n\n            if (location && typeof location.state !== typeof undefined) {\n                ({ host, path } = location.state);\n            }\n            else {\n                const params = new URLSearchParams(location.search.substr(1));\n                const url = params.get('url');\n                if (url !== null) {\n                    ({ host, path } = getLocationObjectFromUrl(url));\n                }\n            }\n            dispatch(setHost(host));\n            dispatch(enterFolder(path));\n        }\n    };\n};\n\nexport const getLocationObjectFromUrl = (urlString: string) => {\n    const url = new URL(urlString);\n    const host = url.origin;\n    const path = url.pathname.split('/').filter(val => val !== '');\n\n    return {\n        host,\n        path\n    };\n}\n\nconst locationsEqual = (first: MyLocation, second: MyLocation) => {\n    return first.host === second.host\n           && first.path.length === second.path.length\n           && first.path.every((val, index) => val === second.path[index]);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HistoryHandler);\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { connect } from 'react-redux';\nimport { solidLogin, setHost, enterFolder, solidLogout, clearCache, MyDispatch, setErrorMessage, closeDialog } from '../../../Actions/Actions';\nimport { getLocationObjectFromUrl } from '../../HistoryHandler/HistoryHandler';\nimport { DialogButtonClickEvent, DialogDispatchProps, DialogStateProps } from '../dialogTypes';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nclass FormDialog extends Component<ChooseLocationProps> {\n    state = {\n        location: '',\n    };\n\n    componentWillReceiveProps(props: ChooseLocationProps) {\n        const { isLoggedIn, webId } = props;\n        const params = new URLSearchParams(document.location.search.substr(1));\n        const encodedUrl = params.get('url');\n\n        if (encodedUrl !== null) {\n            const location = decodeURI(encodedUrl);\n            this.setState({ location });\n        }\n        else if (isLoggedIn && webId) {\n            const location = (new URL(webId)).origin;\n            this.setState({ location });\n        }\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) {\n        const targetForm = event.currentTarget.form;\n        if (targetForm) {\n            const input = targetForm.querySelector('input');\n            if (input) {\n                const location = input.value;\n                this.setState({ location });\n                return;\n            }\n        }\n        console.log(\"Couldn't find location input\");\n    }\n\n    handleSubmit(event: DialogButtonClickEvent) {\n        this.props.handleSubmit(event, { location: this.state.location });\n    }\n\n    render() {\n        let { location } = this.state;\n        location = location ? location : '';\n        const { handleClose, handleLogin, handleLogout, open, isLoggedIn, webId } = this.props;\n\n        return (\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-choose-location\" fullWidth={true} maxWidth={'sm'}>\n                <form>\n                    <DialogTitle id=\"form-dialog-choose-location\">Choose the storage location</DialogTitle>\n                    <DialogContent>\n                        <Typography variant=\"body1\" gutterBottom>\n                            {!isLoggedIn ?\n                                \"If you want to access private resources, please login with the button below.\"\n                                : \"Logged in as \" + webId + \".\"\n                            }\n                        </Typography>\n                        {!isLoggedIn ?\n                            <Button variant=\"outlined\" color=\"primary\" onClick={handleLogin}>Login</Button>\n                            : <Button variant=\"outlined\" onClick={handleLogout}>Logout</Button>\n                        }\n\n                        <Typography variant=\"body1\">\n                            Please enter the directory you want to open below.\n                    </Typography>\n                        <TextField autoFocus fullWidth\n                            margin=\"normal\"\n                            label=\"Storage Location\"\n                            variant=\"outlined\"\n                            onChange={this.handleChange.bind(this)}\n                            value={location} />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\n                            Cancel\n                    </Button>\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\n                            Open directory\n                    </Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        );\n    }\n}\n\ninterface StateProps extends DialogStateProps {\n    webId: string | null;\n    isLoggedIn: boolean;\n}\ninterface DispatchProps extends DialogDispatchProps {\n    handleLogin(event: DialogButtonClickEvent): void;\n    handleLogout(event: DialogButtonClickEvent): void;\n    handleSubmit(event: DialogButtonClickEvent, { location }: { location: string }): void;\n}\ninterface ChooseLocationProps extends StateProps, DispatchProps { }\n\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    return {\n        open: state.visibleDialogs.CHOOSE_LOCATION,\n        webId: state.account.webId,\n        isLoggedIn: state.account.loggedIn\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        handleClose: () => {\n            dispatch(closeDialog(DIALOGS.CHOOSE_LOCATION));\n        },\n        handleLogin: event => {\n            event.preventDefault();\n            dispatch(solidLogin());\n        },\n        handleLogout: event => {\n            event.preventDefault();\n            dispatch(solidLogout());\n        },\n        handleSubmit: (event, { location }) => {\n            event.preventDefault();\n            if (!location)\n                return dispatch(setErrorMessage(\"Please enter the folder which should be opened\"));\n\n            const { host, path } = getLocationObjectFromUrl(location);\n            dispatch(closeDialog(DIALOGS.CHOOSE_LOCATION));\n            dispatch(setHost(host));\n            dispatch(clearCache());\n            dispatch(enterFolder(path));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { connect } from 'react-redux';\nimport { closeDialog, MyDispatch, openDialog } from '../../../Actions/Actions';\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nclass FormDialog extends Component<ContentProps> {\n\n    state = {\n        lastBlobUrl: null,\n        content: '...',\n        loading: false\n    };\n\n    componentDidUpdate() {\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\n            this.setState({\n                lastBlobUrl: this.props.blobUrl\n            });\n            this.setState({\n                loading: true\n            });\n        }\n    }\n\n    render() {\n        const { handleClose, open } = this.props;\n        return (\n          <div style={{marginLeft:'1em'}}>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-content\" fullWidth={true} maxWidth={'sm'}>\n              <DialogTitle id=\"form-dialog-content\">Viewing file </DialogTitle>\n              <DialogContent>\n                <img src={this.props.blobUrl} alt=\"\" style={{maxWidth: '100%'}}/>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} color=\"primary\" type=\"button\">\n                  Close\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n        );\n    }\n}\n\ninterface StateProps extends DialogStateProps {\n    blobUrl: string | undefined;\n}\ninterface DispatchProps extends DialogDispatchProps {}\ninterface ContentProps extends StateProps, DispatchProps {}\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    return {\n        open: state.visibleDialogs.CONTENT,\n        blobUrl: state.blob || undefined\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DialogDispatchProps => {\n    return {\n        handleClose: () => {\n            dispatch(closeDialog(DIALOGS.CONTENT));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { connect } from 'react-redux';\nimport { MyDispatch, closeDialog } from '../../../Actions/Actions';\nimport Plyr from 'react-plyr';\nimport 'plyr/dist/plyr.css';\nimport { FileItem } from '../../../Api/Item';\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nclass FormDialog extends Component<MediaProps> {\n    render() {\n        const { file, handleClose, open } = this.props;\n\n        const fileName = file ? file.name : undefined;\n        const url = file ? file.url : undefined;\n        const provider = file ? (file.isVideo() ? 'html5' : 'audio') : '';\n        const type = file ? (file.isVideo() ? 'video' : 'audio') : undefined;\n\n        return (\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-display-media\" fullWidth={true} maxWidth={'lg'}>\n                <DialogTitle id=\"form-dialog-display-media\">Display Media</DialogTitle>\n                <DialogContent>\n                    {\n                        file ?\n                            (\n                                <div>\n                                    <p>Playing {file.name}</p>\n                                    <Plyr type={type} /*TODO: provider={provider}*/ url={url} iconUrl=\"./vendor/plyr/plyr.svg\" />\n                                </div>\n                            )\n                            : <p>No media file opened</p>\n                            \n                    }\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\ninterface StateProps extends DialogStateProps {\n    file?: FileItem;\n}\ninterface MediaProps extends StateProps, DialogDispatchProps {}\n\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    const open = state.visibleDialogs.MEDIA;\n\n    const file = state.items.selected[0];   \n\n    if (file instanceof FileItem) {\n            return {\n                open,\n                file,\n            };\n    }\n    return { open };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DialogDispatchProps => {\n    return {\n        handleClose: () => {\n            dispatch(closeDialog(DIALOGS.MEDIA));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\n","import React, { Component, createRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { connect } from 'react-redux';\nimport { updateTextFile, MyDispatch, closeDialog } from '../../../Actions/Actions';\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\nimport { Item } from '../../../Api/Item';\n\nclass FormDialog extends Component<EditProps> {\n    private textField: React.RefObject<HTMLTextAreaElement> = createRef();\n    state = {\n        lastBlobUrl: null as string|null,\n        content: null as string|null,\n        contentType: null as string|null,\n        loading: false\n    };\n\n    componentDidUpdate() {\n        if (this.props.blobUrl !== this.state.lastBlobUrl) {\n            this.setState({\n                lastBlobUrl: this.props.blobUrl\n            });\n            this.setState({\n                loading: true\n            });\n\n            this.props.blobUrl && fetch(this.props.blobUrl).then(async r => {\n                this.setState({\n                    content: await r.text(),\n                    contentType: r.headers.get('content-type')\n                });\n                this.setState({\n                    loading: false\n                });\n            });\n        }\n    }\n\n    handleSave(event: DialogButtonClickEvent) {\n        event.preventDefault();\n        const textField = this.textField.current;\n        const item = this.props.item;\n        if (textField && item) {\n            const content = textField.value;\n            const contentType = this.state.contentType ? this.state.contentType : 'text/plain';\n            this.props.handleSubmit(event, {\n                itemName: item.name,\n                content,\n                contentType\n            });\n        }\n    }\n\n    render() {\n        const { handleClose, open, item } = this.props;\n        const itemName = item ? item.getDisplayName() : 'No item selected';\n        const textAreaStyle = {\n            width: '100%',\n            minHeight: '300px'\n        };\n        const textArea = <textarea style={textAreaStyle} defaultValue={this.state.content || ''} ref={this.textField} />;\n\n        return (\n            <div>\n              <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-edit\" fullWidth={true} maxWidth={'sm'}>\n                <form>\n                  <DialogTitle id=\"form-dialog-edit\">Editing file: {itemName} </DialogTitle>\n                  <DialogContent>\n                    <DialogContentText>\n                      {this.state.loading ? 'Loading...' : textArea}\n                    </DialogContentText>\n                  </DialogContent>\n                  <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\n                      Close\n                    </Button>\n                    <Button color=\"primary\" onClick={this.handleSave.bind(this)} type=\"submit\">\n                      Update\n                    </Button>\n                  </DialogActions>\n                </form>\n              </Dialog>\n            </div>\n        );\n    }\n}\n\ninterface StateProps extends DialogStateProps {\n    item: Item;\n    blobUrl: string;\n}\ninterface DispatchProps extends DialogDispatchProps {\n    handleSubmit(event: DialogButtonClickEvent, { itemName, content, contentType }: { itemName: string, content: string, contentType: string }): void;\n}\ninterface EditProps extends StateProps, DispatchProps {}\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    return {\n        open: state.visibleDialogs.EDIT, // TODO: rename visibleDialogs (e.g. to dialogIsOpen)\n        item: state.items.selected[0],\n        blobUrl: state.blob || ''\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        handleClose: () => {\n            dispatch(closeDialog(DIALOGS.EDIT));\n        },\n        handleSubmit: (event, { itemName, content, contentType }) => {\n            dispatch(updateTextFile(itemName, content, contentType));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\n","import React, { Component, createRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { connect } from 'react-redux';\nimport { createNewFolder, closeDialog, MyDispatch, setErrorMessage } from '../../../Actions/Actions';\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nclass FormDialog extends Component<CreateFolderProps> {\n    private textField: React.RefObject<HTMLInputElement> = createRef();\n\n    handleSubmit(event: DialogButtonClickEvent) {\n        const textField = this.textField.current;\n        if (textField) {\n            const folderName = textField.value;\n            this.props.handleSubmit(event, { folderName });\n        }\n    }\n\n    render() {\n        const { handleClose, handleSubmit, open } = this.props;\n\n        return (\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-folder\" fullWidth={true} maxWidth={'sm'}>\n                <form>\n                    <DialogTitle id=\"form-dialog-create-folder\">Create folder</DialogTitle>\n                    <DialogContent>\n                        <TextField autoFocus fullWidth margin=\"dense\" label=\"Folder name\" type=\"text\" inputRef={this.textField} />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\n                            Cancel\n                    </Button>\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\n                            Save\n                    </Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        );\n    }\n}\n\ninterface DispatchProps extends DialogDispatchProps {\n    handleSubmit(event: DialogButtonClickEvent, { folderName }: { folderName: string }): void;\n}\ninterface CreateFolderProps extends DialogStateProps, DispatchProps { }\n\nconst mapStateToProps = (state: AppState): DialogStateProps => {\n    return {\n        open: state.visibleDialogs.CREATE_FOLDER\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        handleClose: () => {\n            dispatch(closeDialog(DIALOGS.CREATE_FOLDER));\n        },\n        handleSubmit: (event, { folderName }) => {\n            event.preventDefault();\n            dispatch(createNewFolder(folderName));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\n","import React, { Component, createRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { connect } from 'react-redux';\nimport { createFile, closeDialog, MyDispatch, setErrorMessage } from '../../../Actions/Actions';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nclass FormDialog extends Component<CreateFileProps> {\n    private textField: React.RefObject<HTMLInputElement> = createRef();\n\n    handleSubmit(event: DialogButtonClickEvent) {\n        const textField = this.textField.current;\n        if (textField) {\n            const fileName = textField.value;\n            this.props.handleSubmit(event, { fileName });\n        }\n    }\n\n    render() {\n        const { handleClose, open } = this.props;\n\n        return (\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-file\" fullWidth={true} maxWidth={'sm'}>\n                <form>\n                    <DialogTitle id=\"form-dialog-create-file\">Create file</DialogTitle>\n                    <DialogContent>\n                        <TextField autoFocus fullWidth margin=\"dense\" label=\"File name\" type=\"text\" inputRef={this.textField}/>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\n                            Cancel\n                    </Button>\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\n                            Create\n                    </Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        );\n    }\n}\n\ninterface DispatchProps extends DialogDispatchProps {\n    handleSubmit(event: DialogButtonClickEvent, { fileName }: { fileName: string }): void;\n}\ninterface CreateFileProps extends DialogStateProps, DispatchProps { }\n\nconst mapStateToProps = (state: AppState): DialogStateProps => {\n    return {\n        open: state.visibleDialogs.CREATE_FILE\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        handleClose: () => {\n            dispatch(closeDialog(DIALOGS.CREATE_FILE));\n        },\n        handleSubmit: (event, { fileName }) => {\n            event.preventDefault();\n            dispatch(createFile(fileName));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\n","import React, { Component, ChangeEvent, createRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { connect } from 'react-redux';\nimport { renameFile, renameFolder, MyDispatch, closeDialog } from '../../../Actions/Actions';\nimport { FolderItem, Item } from '../../../Api/Item';\nimport { DialogStateProps, DialogDispatchProps, DialogButtonClickEvent } from '../dialogTypes';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\nclass FormDialog extends Component<RenameProps> {\n    private textField: React.RefObject<HTMLInputElement> = createRef();\n\n    handleSubmit(event: DialogButtonClickEvent) {\n        const textField = this.textField.current;\n        const item = this.props.item;\n        if (textField && item) {\n            const newName = textField.value;\n            this.props.handleSubmit(event, { item, newName });\n        }\n    }\n\n    render() {\n        const { handleClose, open, item } = this.props;\n        const previousName = item ? item.name : '';\n\n        return (\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-create-folder\" fullWidth={true} maxWidth={'sm'}>\n                <form>\n                  <DialogTitle id=\"form-dialog-create-folder\">Rename</DialogTitle>\n                  <DialogContent>\n                    <TextField autoFocus fullWidth margin=\"dense\" label=\"Item name\" type=\"text\" inputRef={this.textField} defaultValue={previousName} />\n                  </DialogContent>\n                  <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\" type=\"button\">\n                      Cancel\n                    </Button>\n                    <Button color=\"primary\" type=\"submit\" onClick={this.handleSubmit.bind(this)}>\n                      Save\n                    </Button>\n                  </DialogActions>\n                </form>\n            </Dialog>\n        );\n    }\n}\n\ninterface StateProps extends DialogStateProps {\n    item?: Item;\n}\ninterface DispatchProps extends DialogDispatchProps {\n    handleSubmit(event: DialogButtonClickEvent, { item, newName }: { item: Item, newName: string }): void;\n}\ninterface RenameProps extends StateProps, DispatchProps {}\n\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    return {\n        open: state.visibleDialogs.RENAME,\n        item: state.items.selected[0],\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        handleClose: () => {\n            dispatch(closeDialog(DIALOGS.RENAME));\n        },\n        handleSubmit: (event, { item, newName }) => {\n            event.preventDefault();\n            if (item instanceof FolderItem) // TODO: Create renameItem\n                dispatch(renameFolder(item.name, newName));\n            else\n                dispatch(renameFile(item.name, newName));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\nimport blue from '@material-ui/core/colors/blue';\nimport '../File.css';\nimport { FileItem, Item } from '../../../Api/Item';\n\n// TODO: Check main differences between normal File.tsx component\nfunction FileSublist(props: OwnProps) {\n    const { item, isSelected, handleClick, handleDoubleClick } = props;\n    const avatarStyle = {\n        backgroundColor: isSelected ? blue['A200'] : undefined\n    };\n    return (\n        <div className=\"File\" onClick={handleClick} data-selected={isSelected} onDoubleClick={handleDoubleClick}>\n            <ListItem>\n                <ListItemAvatar>\n                    <Avatar style={avatarStyle}>\n                        { (item instanceof FileItem) ? <FileIcon /> : <FolderIcon />}\n                    </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={item.name} secondary=\"\" />\n            </ListItem>\n        </div>\n    );\n}\n\ninterface OwnProps {\n    item: Item;\n    isSelected: boolean;\n    handleClick(): void;\n    handleDoubleClick(): void;\n}\n\nexport default FileSublist;\n\n","import React from 'react';\nimport FileSublist from '../../File/FileSublist/FileSublist'; \nimport Loader from '../../Loader/Loader'; \nimport FileListEmptyMessage from '../FileListEmptyMessage';\nimport './FileListSublist.css'; \nimport { FolderItem } from '../../../Api/Item';\n\nfunction FileListSublist(props: OwnProps) {\n    const { items, isLoading, handleOpenFolder } = props;\n    \n    const itemComponents = items.map((item, key) => {\n        return <FileSublist\n            item={item}\n            isSelected={false}\n            handleClick={() => handleOpenFolder(item)}\n            handleDoubleClick={() => handleOpenFolder(item)}\n            key={key} />\n    });\n\n    return <div className=\"FileListSublist\">\n        { isLoading ? \n            <Loader /> : \n            itemComponents.length ? itemComponents : <FileListEmptyMessage />\n        }\n    </div>\n}\n\ninterface OwnProps {\n    items: FolderItem[];\n    isLoading: boolean;\n    handleOpenFolder(folder: FolderItem): void;\n}\n\nexport default FileListSublist;","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FileListSublist from '../../FileList/FileListSublist/FileListSublist'; \nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport { Item, FolderItem } from '../../../Api/Item';\nimport * as ApiHandler from '../../../Api/ApiHandler';\n\nclass FormDialog extends Component<OwnProps, OwnState> {\n    private host: string;\n    private path: string[];\n\n    constructor(props: OwnProps) {\n        super(props);\n        const { initialPath, initialHost } = props;\n        this.host = initialHost;\n        this.path = initialPath;\n\n        this.state = {\n            items: [],\n            isLoading: true,\n        };\n    }\n\n    componentDidUpdate(prevProps: OwnProps) {\n        if (prevProps.initialHost !== this.props.initialHost\n            || prevProps.initialPath.join('') !== this.props.initialPath.join('')) {\n            this.host = this.props.initialHost;\n            this.path = this.props.initialPath;\n            this.updateItems();\n        }\n    }\n\n    handleGoBack() {\n        this.path = this.path.slice(0, -1);\n        this.updateItems();\n    }\n\n    handleOpenFolder(folder: FolderItem) {\n        this.path = [...folder.path, folder.name];\n        this.updateItems();\n    }\n\n    async updateItems() {\n        this.setState({ isLoading: true });\n        const items = (await ApiHandler.getItemList(this.path.join('/')))\n            .filter(item => item instanceof FolderItem);\n\n        this.setState({ isLoading: false, items });\n    }\n\n    render() {\n        const { open, handleClose, handleSubmit, actionName } = this.props;\n        const { items, isLoading } = this.state;\n        const host = this.host;\n        const path = this.path;\n        const url = `${host}/${path.join('/')}`;\n        const canGoBack = path.length > 0;\n        \n        return (\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-move\" fullWidth={true} maxWidth={'sm'}>\n                <form>\n                    <DialogTitle id=\"form-dialog-move\">\n                        {actionName} items to <small style={{color: 'grey'}}>{ url }</small>\n                    </DialogTitle>\n                    <DialogContent>\n                        <FileListSublist items={items} isLoading={isLoading} handleOpenFolder={this.handleOpenFolder.bind(this)}/>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleGoBack.bind(this)} color=\"primary\" type=\"button\" disabled={!canGoBack}>\n                            <KeyboardArrowLeftIcon /> Go back directory\n                        </Button>\n\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\n                            Cancel\n                        </Button>\n                        <Button color=\"primary\" onClick={(e) => handleSubmit({ host, path })} type=\"submit\">\n                            {actionName}\n                        </Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        );\n    }\n}\n\ninterface OwnProps {\n    open: boolean;\n    actionName: string;\n    initialHost: string;\n    initialPath: string[];\n    handleSubmit({ host, path }: { host: string, path: string[] }): void;\n    handleClose(): void;\n}\n\ninterface OwnState {\n    items: Item[];\n    isLoading: boolean;\n}\n\nexport default FormDialog;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { moveItems, closeDialog, MyDispatch } from '../../../Actions/Actions';\nimport { DialogStateProps } from '../dialogTypes';\nimport { Item } from '../../../Api/Item';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nimport ChooseLocation from '../ChooseLocation/ChooseLocation';\n\nfunction MoveDialog(props: MoveProps) {\n    const { initialHost, initialPath, selectedItems, open, handleClose, move } = props;\n\n    return <ChooseLocation\n        open={open}\n        actionName=\"Move\"\n        initialHost={initialHost}\n        initialPath={initialPath}\n        handleClose={handleClose}\n        handleSubmit={(location) => move(selectedItems, location)}\n    />\n}\n\n\ninterface StateProps extends DialogStateProps {\n    initialHost: string;\n    initialPath: string[];\n    selectedItems: Item[];\n}\ninterface DispatchProps {\n    handleClose(): void;\n    move(selectedItems: Item[], { host, path }: { host: string, path: string[] }): void;\n}\ninterface MoveProps extends StateProps, DispatchProps {}\n\n\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    return {\n        open: state.visibleDialogs.MOVE,\n        initialHost: state.account.host || '',\n        initialPath: state.path,\n        selectedItems: state.items.selected,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        handleClose: () => {\n            dispatch(closeDialog(DIALOGS.MOVE));\n        },\n        move: (selectedItems, targetLocation) => {\n            dispatch(moveItems(selectedItems, targetLocation));\n        },\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoveDialog);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { copyItems, closeDialog, MyDispatch } from '../../../Actions/Actions';\nimport { DialogStateProps } from '../dialogTypes';\nimport { Item } from '../../../Api/Item';\nimport { AppState } from '../../../Reducers/reducer';\nimport { DIALOGS } from '../../../Actions/actionTypes';\n\nimport ChooseLocation from '../ChooseLocation/ChooseLocation';\n\nfunction CopyDialog(props: CopyProps) {\n    const { initialHost, initialPath, selectedItems, open, handleClose, copy } = props;\n\n    return <ChooseLocation\n        open={open}\n        actionName=\"Copy\"\n        initialHost={initialHost}\n        initialPath={initialPath}\n        handleClose={handleClose}\n        handleSubmit={(location) => copy(selectedItems, location)}\n    />\n}\n\n\ninterface StateProps extends DialogStateProps {\n    initialHost: string;\n    initialPath: string[];\n    selectedItems: Item[];\n}\ninterface DispatchProps {\n    handleClose(): void;\n    copy(selectedItems: Item[], { host, path }: { host: string, path: string[] }): void;\n}\ninterface CopyProps extends StateProps, DispatchProps {}\n\n\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    return {\n        open: state.visibleDialogs.COPY,\n        initialHost: state.account.host || '',\n        initialPath: state.path,\n        selectedItems: state.items.selected,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        handleClose: () => {\n            dispatch(closeDialog(DIALOGS.COPY));\n        },\n        copy: (selectedItems, targetLocation) => {\n            dispatch(copyItems(selectedItems, targetLocation));\n        },\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyDialog);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\nimport { getHumanFileSize } from '../../Api/Item';\n\nfunction UploadFileList(props: UploadFileListProps) {\n    const { files } = props;\n    files[0];\n    const list = Array.from(files).map((f, i) =>\n        <ListItem dense key={i}>\n            <ListItemIcon>\n                <FileIcon />\n            </ListItemIcon>\n            <ListItemText primary={`${f.name} (${getHumanFileSize(f.size)})`} />\n        </ListItem>\n    );\n\n    return (\n        <div>\n            <List component=\"nav\">\n                {list}\n            </List>\n        </div>\n    );\n}\n\ninterface UploadFileListProps {\n    files: FileList;\n}\n\nexport default UploadFileList;\n","import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport UploadFileList from './UploadFileList';\n\nclass FileUploader extends Component<FileUploadProps> {\n    inputRef: React.RefObject<HTMLInputElement> = createRef();\n\n    handleReset(event: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent): void {\n        const inputElement = this.inputRef.current;\n        if (inputElement) {\n            inputElement.value = '';\n            this.props.handleReset(event);\n        }\n    }\n\n    render() {\n        const { fileList, handleSelectedFiles } = this.props;\n        const styles = {\n            inputfile: {\n                // TODO: Change this to display none as soon, as the label button works\n                // display: 'none'\n            }, inputreset: {\n                display: (fileList && fileList.length) ? 'inline-flex' : 'none'\n            }\n        }\n\n        return (\n            <div>\n                <label htmlFor=\"button-file\">\n                    <input style={styles.inputfile} id=\"button-file\" ref={this.inputRef} multiple type=\"file\" onChange={handleSelectedFiles} />\n                    {/*<Button component=\"span\" variant=\"contained\" color=\"primary\">\n                        Select Files\n                    </Button>*/}\n                </label>\n\n                <Button style={styles.inputreset} component=\"span\" type=\"reset\" onClick={this.handleReset.bind(this)}>\n                    Clear\n                </Button>\n\n                { fileList && <UploadFileList files={fileList} /> }\n            </div>\n        );\n    }\n}\n\ninterface FileUploadProps {\n    fileList: FileList|null;\n    handleReset(event: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent): void;\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\n}\n\nexport default FileUploader;\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { connect } from 'react-redux';\nimport { resetFileUploader, uploadFiles, setFileUploadList, MyDispatch, resetFileUploadList, setErrorMessage } from '../../../Actions/Actions';\nimport FileUploader from '../../FileUploader/FileUploader';\nimport { DialogStateProps, DialogDispatchProps } from '../dialogTypes';\nimport { AppState } from '../../../Reducers/reducer';\n\nclass FormDialog extends Component<UploadFileProps> {\n\n    render() {\n        const { handleClose, handleReset, handleSubmit, open, canUpload, progress, fileList, handleSelectedFiles } = this.props;\n\n        return (\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-upload\" fullWidth={true} maxWidth={'sm'}>\n                <form>\n                    <DialogTitle id=\"form-dialog-upload\">\n                        Upload files\n                    </DialogTitle>\n                    <DialogContent>\n                        <FileUploader fileList={fileList} handleSelectedFiles={handleSelectedFiles} handleReset={handleReset}/>\n                        {canUpload ? <LinearProgress variant=\"determinate\" value={progress} /> : null }\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose} color=\"primary\" type=\"button\">\n                            Cancel\n                        </Button>\n                        <Button color=\"primary\" onClick={handleSubmit} disabled={!canUpload} type=\"submit\">\n                            Upload\n                        </Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        );\n    }\n}\n\ninterface StateProps extends DialogStateProps {\n    canUpload: boolean;\n    fileList: FileList|null;\n    progress: number;\n}\ninterface DispatchProps extends DialogDispatchProps {\n    handleSelectedFiles(event: React.ChangeEvent<HTMLInputElement>): void;\n    handleReset(): void;\n}\ninterface UploadFileProps extends StateProps, DispatchProps {}\n\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    return {\n        open: state.visibleDialogs.UPLOAD_FILE,\n        canUpload: state.upload.fileList ? state.upload.fileList.length > 0 : false,\n        fileList: state.upload.fileList,\n        progress: state.upload.progress,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        handleClose: (event) => {\n            dispatch(resetFileUploader());\n        },\n        handleSubmit: (event) => {\n            event.preventDefault();\n            dispatch(uploadFiles());\n        },\n        handleSelectedFiles: (event) => {\n            const files = event.target.files;\n            dispatch(setFileUploadList(files));\n        },\n        handleReset: () => {\n            dispatch(resetFileUploadList());\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\n","import React from 'react';\nimport DialogMenu from './Menu/Menu';\nimport DialogContent from './Content/Content';\nimport DialogMedia from './Media/Media';\nimport DialogEdit from './Edit/Edit';\nimport DialogCreateFolder from './CreateFolder/CreateFolder';\nimport DialogCreateFile from './CreateFile/CreateFile';\nimport DialogRename from './Rename/Rename';\nimport DialogMove from './Move/Move';\nimport DialogCopy from './Copy/Copy';\nimport DialogUploadFile from './UploadFile/UploadFile';\n\n// TODO: Consider moving the visibility logic here\nfunction Dialogs() {\n    return (\n        <div className=\"Dialogs\">\n            <DialogMenu />\n            <DialogContent />\n            <DialogMedia />\n            <DialogEdit />\n            <DialogCreateFolder />\n            <DialogCreateFile />\n            <DialogMove />\n            <DialogCopy />\n            <DialogRename />\n            <DialogUploadFile />\n        </div>\n    );\n}\n\nexport default Dialogs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { connect, MapDispatchToPropsFactory } from 'react-redux';\nimport { MyDispatch, resetErrorMessage } from '../../Actions/Actions';\nimport { AppState } from '../../Reducers/reducer';\n\nconst styles = (theme: Theme) => createStyles({\n  close: {\n    padding: theme.spacing.unit / 2,\n  },\n});\n\nclass DynamicSnackbar extends React.Component<DynamicSnackbarProps> {\n  render() {\n    const { classes, errorMsg, handleClose, open, notificationDuration } = this.props;\n    return (\n      <div>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={open}\n          autoHideDuration={notificationDuration}\n          onClose={handleClose}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\">{errorMsg}</span>}\n          action={[\n            <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\" className={classes.close} onClick={handleClose} >\n              <CloseIcon />\n            </IconButton>,\n          ]}\n        />\n      </div>\n    );\n  }\n}\n\ninterface StateProps {\n  open: boolean;\n  errorMsg: string;\n  notificationDuration: number;\n}\ninterface DispatchProps {\n  handleClose(): void;\n}\ninterface DynamicSnackbarProps extends StateProps, DispatchProps, WithStyles<typeof styles> {}\n\nconst mapStateToProps = (state: AppState): StateProps => {\n    return {\n        open: !!state.errorMessage,\n        errorMsg: state.errorMessage,\n        notificationDuration: 60000\n    };\n};\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        handleClose: () => {\n          dispatch(resetErrorMessage());\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DynamicSnackbar));\n\n","import React, { Component } from 'react';\nimport FileList from './Components/FileList/FileList';\nimport Navbar from './Components/Navbar/Navbar';\nimport ContextMenu from './Components/ContextMenu/ContextMenu';\nimport Dialogs from './Components/Dialogs/Dialogs';\n\nimport { MuiThemeProvider as MaterialUI, createMuiTheme, WithStyles } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport { connect } from 'react-redux';\nimport { initApp, MyDispatch, closeContextMenu } from './Actions/Actions';\nimport DynamicSnackbar from './Components/Notification/DynamicSnackbar';\nimport HistoryHandler from './Components/HistoryHandler/HistoryHandler';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: blue,\n    },\n    typography: {\n        useNextVariants: true,\n    }\n});\n\nclass App extends Component<AppProps> {\n\n    componentDidMount() {\n        this.props.init();\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <MaterialUI theme={theme}>\n                    <div onClick={this.props.handleHideContextMenu} onContextMenu={this.props.handleHideContextMenu}>\n                        <Navbar />\n                        <FileList />\n                        <ContextMenu />\n                        <DynamicSnackbar />\n                        <Dialogs />\n                    </div>\n                </MaterialUI>\n                <HistoryHandler />\n            </div>\n        );\n    }\n}\n\ninterface DispatchProps {\n    init(): void;\n    handleHideContextMenu(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n}\n\ninterface AppProps extends DispatchProps {}\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (dispatch: MyDispatch): DispatchProps => {\n    return {\n        init: () => {\n            dispatch(initApp());\n        },\n\n        handleHideContextMenu: (event) => {\n            const element = event.target as HTMLElement;\n            if (!(element.tagName === 'INPUT' || /label/i.test(element.className))) {\n                event.preventDefault();\n            }\n            dispatch(closeContextMenu());\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux'\nimport reducer from './Reducers/reducer'\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport './index.css';\nimport 'typeface-roboto';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider >\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register({\n    onUpdate: (config) => {\n        console.group('serviceWorker.onUpdate');\n        console.log(config);\n        console.groupEnd();\n    },\n    onSuccess: (config) => {\n        console.group('serviceWorker.onSuccess');\n        console.log(config);\n        console.groupEnd();\n    }\n});"],"sourceRoot":""}